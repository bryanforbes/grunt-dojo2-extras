{"version":3,"file":"request.js","sourceRoot":"","sources":["../../../src/util/request.ts"],"names":[],"mappings":";;;;;;;;;;;IACA,qCAAqC;IAErC,8CAAuD;IACvD,0DAA4D;IAG5D,yBAAgC,QAAsB;QACrD,IAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;QACnC,EAAE,CAAC,CAAC,UAAU,GAAG,GAAG,IAAI,UAAU,IAAI,GAAG,CAAC,CAAC,CAAC;YAC3C,IAAM,SAAO,GAAG,QAAQ,CAAC,UAAU,CAAC;YACpC,MAAM,CAAS,kBAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC;iBAC9C,IAAI,CAAC,UAAU,IAAI;gBACnB,MAAM,IAAI,KAAK,CAAC,2BAA0B,UAAU,UAAO,SAAO,UAAO,IAAO,CAAC,CAAC;YACnF,CAAC,CAAC,CAAC;QACL,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC;IACjB,CAAC;IAVD,0CAUC;IAED,iBAAwB,OAAuB;QAC9C,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YACtC,IAAM,WAAW,GAAG,IAAI,MAAM,CAAC,CAAI,OAAO,CAAC,IAAI,IAAI,EAAE,WAAM,OAAO,CAAC,QAAQ,IAAI,EAAE,CAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACxG,IAAM,OAAO,GAAG,OAAO,CAAC,OAAO,GAA+B,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;YACpF,OAAO,CAAC,eAAe,CAAC,GAAG,WAAU,WAAc,CAAC;YACpD,OAAO,OAAO,CAAC,QAAQ,CAAC;YACxB,OAAO,OAAO,CAAC,IAAI,CAAC;QACrB,CAAC;QACD,MAAM,CAAC,OAAO,CAAC;IAChB,CAAC;IATD,0BASC;IAED,IAAM,QAAQ,GAAa,UAAU,GAAW,EAAE,OAAuB;QACxE,MAAM,CAAC,cAAW,CAAC,GAAG,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC;IAEF,iBAAO,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;IAErC,kBAAe,iBAAO,CAAC","sourcesContent":["import { NodeResponse } from '@dojo/core/request/providers/node';\nimport { toString } from './streams';\nimport { RequestOptions, Response } from '@dojo/core/request/interfaces';\nimport request, { Provider } from '@dojo/core/request';\nimport nodeRequest from '@dojo/core/request/providers/node';\nimport Task from '@dojo/core/async/Task';\n\nexport function responseHandler(response: NodeResponse): NodeResponse | Promise<NodeResponse> {\n\tconst statusCode = response.status;\n\tif (statusCode < 200 || statusCode >= 300) {\n\t\tconst message = response.statusText;\n\t\treturn <never> toString(response.nativeResponse)\n\t\t\t.then(function (body) {\n\t\t\t\tthrow new Error(`Github responded with ${ statusCode }. ${ message }. ${ body }`);\n\t\t\t});\n\t}\n\treturn response;\n}\n\nexport function fixAuth(options: RequestOptions) {\n\tif (options.password || options.user) {\n\t\tconst credentials = new Buffer(`${ options.user || '' }:${ options.password || ''}`).toString('base64');\n\t\tconst headers = options.headers = <{ [key: string]: string }> options.headers || {};\n\t\theaders['Authorization'] = `Basic ${ credentials }`;\n\t\tdelete options.password;\n\t\tdelete options.user;\n\t}\n\treturn options;\n}\n\nconst provider: Provider = function (url: string, options: RequestOptions): Task<Response> {\n\treturn nodeRequest(url, fixAuth(options));\n};\n\nrequest.setDefaultProvider(provider);\n\nexport default request;\n"]}