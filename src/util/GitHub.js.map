{"version":3,"file":"GitHub.js","sourceRoot":"","sources":["../../../src/util/GitHub.ts"],"names":[],"mappings":"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","sourcesContent":["import request from '@dojo/core/request';\nimport { hasGitCredentials } from './environment';\nimport { readFileSync } from 'fs';\nimport { Response } from '@dojo/core/request';\nimport { RequestOptions } from '@dojo/core/request/interfaces';\nimport { toString } from './streams';\nimport { NodeResponse } from '@dojo/core/request/providers/node';\n\nexport interface Release {\n\tname: string;\n\tcommit: {\n\t\tsha: string;\n\t\turl: string;\n\t};\n}\n\nconst API_URL = 'https://api.github.com';\n\nexport interface Options {\n\tpassword?: string;\n\tusername?: string;\n}\n\nexport interface AuthResponse {\n\tid: number;\n\ttoken: string;\n}\n\nfunction responseHandler(response: NodeResponse): Response | Promise<Response> {\n\tconst statusCode = response.status;\n\tif (statusCode < 200 || statusCode >= 300) {\n\t\tconst message = response.statusText;\n\t\treturn <never> toString(response.nativeResponse)\n\t\t\t.then(function (body) {\n\t\t\t\tthrow new Error(`Github responded with ${ statusCode }. ${ message }. ${ body }`);\n\t\t\t});\n\t}\n\treturn response;\n}\n\nexport default class GitHub {\n\tname: string;\n\n\towner: string;\n\n\tpassword: string;\n\n\tusername: string;\n\n\tconstructor(owner: string, name: string, options: Options = {}) {\n\t\tif (!owner) {\n\t\t\tthrow new Error('A repo owner must be specified');\n\t\t}\n\t\tif (!name) {\n\t\t\tthrow new Error('A repo name must be specified');\n\t\t}\n\n\t\tthis.owner = owner;\n\t\tthis.name = name;\n\t\tthis.authenticate(options.username, options.password);\n\t}\n\n\tget url(): string {\n\t\treturn hasGitCredentials() ? this.getSshUrl() : this.getHttpsUrl();\n\t}\n\n\tasync createAuthorizationToken(note: string = '', scopes: string[] = [\n\t\t'read:org', 'user:email', 'repo_deployment', 'repo:status', 'public_repo', 'write:repo_hook'\n\t]): Promise<AuthResponse> {\n\t\tthis.assertAuthentication();\n\t\tconst endpoint = `https://api.github.com/authorizations`;\n\t\tconst options: RequestOptions = {\n\t\t\tbody: JSON.stringify({\n\t\t\t\tscopes,\n\t\t\t\tnote\n\t\t\t}),\n\t\t\tpassword: this.password,\n\t\t\tuser: this.username,\n\t\t};\n\t\treturn request.post(endpoint, options)\n\t\t\t.then(responseHandler)\n\t\t\t.then(response => response.json<AuthResponse>());\n\t}\n\n\tasync removeAuthorizationToken(id: string | number): Promise<Response> {\n\t\tconst endpoint = `https://api.github.com/authorizations/${ id }`;\n\t\treturn request.delete(endpoint, {\n\t\t\tpassword: this.password,\n\t\t\tuser: this.username\n\t\t}).then(responseHandler);\n\t}\n\n\taddDeployKey(keyfile: string, title: string, readOnly: boolean = true): Promise<any> {\n\t\tthis.assertAuthentication();\n\t\tconst endpoint = `https://api.github.com/repos/${ this.owner }/${ this.name }/keys`;\n\t\tconst key = readFileSync(keyfile, { encoding: 'utf8' });\n\t\treturn request.post(endpoint, {\n\t\t\tbody: JSON.stringify({\n\t\t\t\ttitle,\n\t\t\t\tkey,\n\t\t\t\tread_only: readOnly\n\t\t\t}),\n\t\t\tpassword: this.password,\n\t\t\tuser: this.username\n\t\t}).then(responseHandler)\n\t\t.then(response => response.json());\n\t}\n\n\tauthenticate(username: string, password: string) {\n\t\tthis.username = username;\n\t\tthis.password = password;\n\t}\n\n\t/**\n\t * @return {Promise<Release[]>} a list of releases\n\t */\n\tfetchReleases(): Promise<Release[]> {\n\t\tconst url = `${ API_URL }/repos/${ this.owner }/${ this.name }/tags`;\n\n\t\treturn request(url)\n\t\t\t.then(responseHandler)\n\t\t\t.then(response => response.json<Release[]>());\n\t}\n\n\tgetHttpsUrl() {\n\t\treturn `https://github.com/${ this.owner }/${ this.name }.git`;\n\t}\n\n\tgetSshUrl() {\n\t\treturn `git@github.com:${ this.owner }/${ this.name }.git`;\n\t}\n\n\ttoString() {\n\t\treturn `${ this.owner }/${ this.name }`;\n\t}\n\n\tprivate assertAuthentication() {\n\t\tif (!this.username) {\n\t\t\tthrow new Error('Username must be provided');\n\t\t}\n\t\tif (!this.password) {\n\t\t\tthrow new Error('Password must be provided');\n\t\t}\n\t}\n}\n"]}