{"version":3,"file":"Travis.js","sourceRoot":"","sources":["../../../src/util/Travis.ts"],"names":[],"mappings":"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","sourcesContent":["import request, { Response, RequestOptions } from '@dojo/core/request';\nimport GitHub, { AuthResponse } from './GitHub';\nimport { logger } from '../log';\n\nfunction responseHandler(response: Response): Response {\n\tconst statusCode = response.status;\n\tif (statusCode < 200 || statusCode >= 300) {\n\t\tconst message = response.statusText;\n\t\tthrow new Error(`Travis responded with ${ statusCode }. ${ message }`);\n\t}\n\treturn response;\n}\n\nfunction getHeaders(token?: string): RequestOptions['headers'] {\n\tconst headers: RequestOptions['headers'] = {\n\t\tAccept: 'application/vnd.travis-ci.2+json',\n\t\t'Content-type': 'application/json',\n\t\t'User-Agent': 'MyClient/1.0.0'\n\t};\n\tif (token) {\n\t\theaders.Authorization = `token ${ token }`;\n\t}\n\treturn headers;\n}\n\nexport interface AuthenticateResponse {\n\taccess_token: string;\n}\n\nexport interface FetchRepositoryResponse {\n\trepo: RepositoryData;\n}\n\nexport default class Travis {\n\ttoken: string = null;\n\n\tprivate githubAuthorization: AuthResponse;\n\n\tasync authenticate(githubToken: string): Promise<string> {\n\t\tconst response = await request.post('https://api.travis-ci.org/auth/github', {\n\t\t\tbody: JSON.stringify({\n\t\t\t\t'github_token': githubToken\n\t\t\t}),\n\t\t\theaders: getHeaders()\n\t\t}).then(responseHandler);\n\n\t\tconst token = (await response.json<AuthenticateResponse>()).access_token;\n\t\tthis.token = token;\n\t\treturn token;\n\t}\n\n\t/**\n\t * Create a temporary authorization for GitHub to use with Travis\n\t */\n\tasync createAuthorization(repo: GitHub) {\n\t\tconst params = {\n\t\t\tnote: 'temporary token for travis cli',\n\t\t\tscopes: [\n\t\t\t\t'read:org', 'user:email', 'repo_deployment', 'repo:status', 'public_repo', 'write:repo_hook'\n\t\t\t]\n\t\t};\n\t\tconst existing = await repo.findAuthorization(params);\n\n\t\tif (existing) {\n\t\t\tthrow new Error(`An existing authorization exists. \"#${ existing.id }\"`);\n\t\t}\n\n\t\tthis.githubAuthorization = await repo.createAuthorization(params);\n\t\ttry {\n\t\t\tawait this.authenticate(this.githubAuthorization.token);\n\t\t}\n\t\tcatch (e) {\n\t\t\tlogger.info('Cleaning up temporary GitHub token');\n\t\t\tawait this.deleteAuthorization(repo);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * delete authorization used by the GitHub repo\n\t */\n\tasync deleteAuthorization(repo: GitHub) {\n\t\tif (this.githubAuthorization) {\n\t\t\tawait repo.deleteAuthorization(this.githubAuthorization.id);\n\t\t}\n\t}\n\n\tasync fetchRepository(slug: string) {\n\t\tconst endpoint = `https://api.travis-ci.org/repos/${ slug }`;\n\t\tconst response = await request.get(endpoint, {\n\t\t\theaders: getHeaders(this.token)\n\t\t}).then(responseHandler);\n\n\t\tconst body = await response.json<FetchRepositoryResponse>();\n\t\treturn new Repository(this.token, body.repo);\n\t}\n\n\t/**\n\t * @return if Travis has been authorized through GitHub\n\t */\n\tisAuthorized() {\n\t\treturn !!this.githubAuthorization;\n\t}\n}\n\nexport interface RepositoryData {\n\tactive: boolean;\n\tid: number;\n\tslug: string;\n}\n\nexport interface EnvironmentVariable {\n\tid: string;\n\tname: string;\n\tvalue: string;\n\t'public': boolean;\n\trepository_id: number;\n}\n\nexport interface ListEnvironmentVariablesResponse {\n\tenv_vars: EnvironmentVariable[];\n}\n\nexport class Repository {\n\tactive: boolean;\n\n\tid: number;\n\n\tslug: string;\n\n\ttoken: string;\n\n\tconstructor(token: string, repo: RepositoryData) {\n\t\tthis.active = !!repo.active;\n\t\tthis.id = repo.id;\n\t\tthis.slug = repo.slug;\n\t\tthis.token = token;\n\t}\n\n\tasync listEnvironmentVariables(): Promise<EnvironmentVariable[]> {\n\t\tconst endpoint = `https://api.travis-ci.org/settings/env_vars?repository_id=${ this.id }`;\n\t\tconst response = await request.get(endpoint, {\n\t\t\theaders: getHeaders(this.token)\n\t\t}).then(responseHandler);\n\n\t\treturn (await response.json<ListEnvironmentVariablesResponse>()).env_vars;\n\t}\n\n\tasync setEnvironmentVariables(... variables: Array<{ name: string, value: string, isPublic?: boolean }>) {\n\t\tconst envvars = await this.listEnvironmentVariables();\n\n\t\tfor (let { name, value, isPublic } of variables) {\n\t\t\tconst match: EnvironmentVariable = (<any> envvars).find(function (envvar: EnvironmentVariable) {\n\t\t\t\treturn envvar.name === name;\n\t\t\t});\n\n\t\t\tif (match) {\n\t\t\t\tawait this.updateEnvironmentVariable(match.id, name, value, isPublic);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tawait this.addEnvironmentVariable(name, value, isPublic);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async addEnvironmentVariable(name: string, value: string, isPublic = false): Promise<Repository> {\n\t\tconst endpoint = `https://api.travis-ci.org/settings/env_vars?repository_id=${ this.id }`;\n\t\tconst response = await request.post(endpoint, {\n\t\t\tbody: JSON.stringify({\n\t\t\t\t'env_var': {\n\t\t\t\t\tname,\n\t\t\t\t\tvalue,\n\t\t\t\t\t'public': isPublic\n\t\t\t\t}\n\t\t\t}),\n\t\t\theaders: getHeaders(this.token)\n\t\t}).then(responseHandler);\n\n\t\treturn response.json<Repository>();\n\t}\n\n\tprivate async updateEnvironmentVariable(id: string, name: string, value: string, isPublic = false): Promise<Repository> {\n\t\tconst endpoint = `https://api.travis-ci.org/settings/env_vars/${ id }?repository_id=${ this.id }`;\n\t\tconst response = await request(endpoint, {\n\t\t\tbody: JSON.stringify({\n\t\t\t\t'env_var': {\n\t\t\t\t\tname,\n\t\t\t\t\tvalue,\n\t\t\t\t\t'public': isPublic\n\t\t\t\t}\n\t\t\t}),\n\t\t\theaders: getHeaders(this.token),\n\t\t\tmethod: 'patch'\n\t\t}).then(responseHandler);\n\n\t\treturn response.json<Repository>();\n\t}\n}\n"]}