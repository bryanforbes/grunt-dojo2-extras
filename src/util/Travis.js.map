{"version":3,"file":"Travis.js","sourceRoot":"","sources":["../../../src/util/Travis.ts"],"names":[],"mappings":"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","sourcesContent":["import request, { Response, RequestOptions } from '@dojo/core/request';\n\nfunction responseHandler(response: Response): Response {\n\tconst statusCode = response.status;\n\tif (statusCode < 200 || statusCode >= 300) {\n\t\tconst message = response.statusText;\n\t\tthrow new Error(`Travis responded with ${ statusCode }. ${ message }`);\n\t}\n\treturn response;\n}\n\nfunction getHeaders(token?: string): RequestOptions['headers'] {\n\tconst headers: RequestOptions['headers'] = {\n\t\tAccept: 'application/vnd.travis-ci.2+json',\n\t\t'Content-type': 'application/json',\n\t\t'User-Agent': 'MyClient/1.0.0'\n\t};\n\tif (token) {\n\t\theaders.Authorization = `token ${ token }`;\n\t}\n\treturn headers;\n}\n\nexport interface AuthenticateResponse {\n\taccess_token: string;\n}\n\nexport interface FetchRepositoryResponse {\n\trepo: RepositoryData;\n}\n\nexport default class Travis {\n\ttoken: string = null;\n\n\tasync authenticate(githubToken: string): Promise<string> {\n\t\tconst response: Response = await request.post('https://api.travis-ci.org/auth/github', {\n\t\t\tbody: JSON.stringify({\n\t\t\t\t'github_token': githubToken\n\t\t\t}),\n\t\t\theaders: getHeaders()\n\t\t}).then(responseHandler);\n\n\t\tconst token = (await response.json<AuthenticateResponse>()).access_token;\n\t\tthis.token = token;\n\t\treturn token;\n\t}\n\n\tasync fetchRepository(slug: string) {\n\t\tconst endpoint = `https://api.travis-ci.org/repos/${ slug }`;\n\t\tconst response: Response = await request.get(endpoint, {\n\t\t\theaders: getHeaders(this.token)\n\t\t}).then(responseHandler);\n\n\t\tconst body = await response.json<FetchRepositoryResponse>();\n\t\treturn new Repository(this.token, body.repo);\n\t}\n}\n\nexport interface RepositoryData {\n\tactive: boolean;\n\tid: number;\n\tslug: string;\n}\n\nexport interface EnviornmentVariable {\n\tid: string;\n\tname: string;\n\tvalue: string;\n\t'public': boolean;\n\trepository_id: number;\n}\n\nexport interface ListEnvironmentVariablesResponse {\n\tenv_vars: EnviornmentVariable[];\n}\n\nexport class Repository {\n\tactive: boolean;\n\n\tid: number;\n\n\tslug: string;\n\n\ttoken: string;\n\n\tconstructor(token: string, repo: RepositoryData) {\n\t\tthis.active = !!repo.active;\n\t\tthis.id = repo.id;\n\t\tthis.slug = repo.slug;\n\t\tthis.token = token;\n\t}\n\n\tasync listEnvironmentVariables(): Promise<EnviornmentVariable[]> {\n\t\tconst endpoint = `https://api.travis-ci.org/settings/env_vars?repository_id=${ this.id }`;\n\t\tconst response: Response = await request.get(endpoint, {\n\t\t\theaders: getHeaders(this.token)\n\t\t}).then(responseHandler);\n\n\t\treturn (await response.json<ListEnvironmentVariablesResponse>()).env_vars;\n\t}\n\n\tasync setEnvironmentVariables(... variables: Array<{ name: string, value: string, isPublic?: boolean }>) {\n\t\tconst envvars = await this.listEnvironmentVariables();\n\n\t\tfor (let { name, value, isPublic } of variables) {\n\t\t\tconst match: EnviornmentVariable = (<any> envvars).find(function (envvar: EnviornmentVariable) {\n\t\t\t\treturn envvar.name === name;\n\t\t\t});\n\n\t\t\tif (match) {\n\t\t\t\tawait this.updateEnvironmentVariable(match.id, name, value, isPublic);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tawait this.addEnvironmentVariable(name, value, isPublic);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async addEnvironmentVariable(name: string, value: string, isPublic = false): Promise<Repository> {\n\t\tconst endpoint = `https://api.travis-ci.org/settings/env_vars?repository_id=${ this.id }`;\n\t\tconst response: Response = await request.post(endpoint, {\n\t\t\tbody: JSON.stringify({\n\t\t\t\t'env_var': {\n\t\t\t\t\tname,\n\t\t\t\t\tvalue,\n\t\t\t\t\t'public': isPublic\n\t\t\t\t}\n\t\t\t}),\n\t\t\theaders: getHeaders(this.token)\n\t\t}).then(responseHandler);\n\n\t\treturn response.json<Repository>();\n\t}\n\n\tprivate async updateEnvironmentVariable(id: string, name: string, value: string, isPublic = false): Promise<Repository> {\n\t\tconst endpoint = `https://api.travis-ci.org/settings/env_vars/${ id }?repository_id=${ this.id }`;\n\t\tconst response: Response = await request(endpoint, {\n\t\t\tbody: JSON.stringify({\n\t\t\t\t'env_var': {\n\t\t\t\t\tname,\n\t\t\t\t\tvalue,\n\t\t\t\t\t'public': isPublic\n\t\t\t\t}\n\t\t\t}),\n\t\t\theaders: getHeaders(this.token),\n\t\t\tmethod: 'patch'\n\t\t}).then(responseHandler);\n\n\t\treturn response.json<Repository>();\n\t}\n}\n"]}