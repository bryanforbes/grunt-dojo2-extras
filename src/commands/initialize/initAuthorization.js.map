{"version":3,"file":"initAuthorization.js","sourceRoot":"","sources":["../../../../src/commands/initialize/initAuthorization.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,4CAA6F;IAC7F,4CAAyD;IACzD,0CAAwC;IACxC,4CAA8C;IAC9C,iCAAmC;IAEnC,gCAAsC,OAAoC,EAAE,IAAY;;gBACjF,UAAU,YAYV,MAAM,EACN,OAAO;;;;qCAbM,YAAI,CAAC,OAAO,EAAE,UAAC,MAAM;4BACvC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,GAAG,CAAC,cAAc,CAAC;wBAC3C,CAAC,CAAC;wBAEF,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;4BACjB,MAAM,gBAAC,IAAI,EAAC;wBACb,CAAC;wBAGD,IAAI,GAAG,IAAI,gBAAM,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;wBACzC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;wBACvC,qBAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,EAAA;;mCAApC,SAAoC;iCACtC,QAAQ,CAAC,IAAI;kCACZ,MAAM,IAAI,MAAM,CAAC,SAAS;wBAE1C,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;4BACb,YAAM,CAAC,IAAI,CAAC,qEAAqE,CAAC,CAAC;4BACnF,YAAM,CAAC,IAAI,CAAC,eAAc,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,oBAAkB,CAAC,CAAC;wBAC1E,CAAC;wBAED,sBAAO,CAAC,OAAO,EAAC;;;;KAChB;IAED,2BAAgD,IAAY,EAAE,MAA6B;QAA7B,uBAAA,EAAA,aAAqB,gBAAM,EAAE;;gBACtF,OAAO,6BAkBH,QAAQ;;;;6BAhBZ,CAAC,MAAM,CAAC,YAAY,EAAE,EAAtB,wBAAsB;wBACzB,YAAM,CAAC,IAAI,CAAC,+DAA+D,CAAC,CAAC;wBAC7E,qBAAM,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAA;;wBAAtC,SAAsC,CAAC;;;;wBAIpB,qBAAM,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAA;;qCAA7C,SAA6C;wBAC1C,qBAAM,UAAU,CAAC,wBAAwB,EAAE,EAAA;;wCAA3C,SAA2C;wBAE7D,qBAAM,sBAAsB,CAAC,aAAa,EAAE,IAAI,CAAC,EAAA;;6BAAjD,SAAiD,EAAjD,wBAAiD;wBACpD,YAAM,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;wBAChD,qBAAM,IAAI,CAAC,mBAAmB,CAAC;gCACxC,IAAI,EAAE,8CAA8C;gCACpD,WAAW,EAAE,IAAI,CAAC,QAAQ,EAAE;6BAC5B,CAAC,EAAA;;wBAHF,OAAO,GAAG,SAGR,CAAC;mCAEc,IAAI,CAAC,SAAS,CAAC;4BAC/B,IAAI,EAAE,OAAO;4BACb,KAAK,EAAE,OAAO,CAAC,KAAK;yBACpB,CAAC;wBACF,qBAAM,UAAU,CAAC,uBAAuB,CAAC,EAAE,IAAI,EAAE,GAAG,CAAC,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,EAAA;;wBAAxG,SAAwG,CAAC;;;;;6BAItG,OAAO,EAAP,yBAAO;wBACV,qBAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAE,CAAC,EAAA;;wBAA1C,SAA0C,CAAC;;6BAE5C,MAAM,GAAC,CAAC;;wBAGR,YAAM,CAAC,IAAI,CAAC,oDAAoD,CAAC,CAAC;wBAClE,qBAAM,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAA;;wBAAtC,SAAsC,CAAC;;;;;;KAExC;IApCD,oCAoCC","sourcesContent":["import Travis, { EnvironmentVariable as TravisEnvironmentVariable } from '../../util/Travis';\nimport GitHub, { AuthResponse } from '../../util/GitHub';\nimport { find } from '@dojo/shim/array';\nimport * as env from '../../util/environment';\nimport { logger } from '../../log';\n\nasync function shouldCreateGithubAuth(envvars: TravisEnvironmentVariable[], repo: GitHub): Promise<boolean> {\n\tconst authEnvVar = find(envvars, (envvar) => {\n\t\treturn envvar.name === env.githubAuthName;\n\t});\n\n\tif (!authEnvVar) {\n\t\treturn true;\n\t}\n\n\t// create a new instance of GitHub. We don't want to spoil our previous authentication.\n\trepo = new GitHub(repo.owner, repo.name);\n\trepo.api.authenticate(env.githubAuth(authEnvVar.value));\n\tconst response = await repo.api.misc.getRateLimit({});\n\tconst limits = response.data;\n\tconst hasAuth = limits && limits.resources;\n\n\tif (hasAuth) {\n\t\tlogger.info('An existing environment variable exists with a GitHub authorization');\n\t\tlogger.info(`Currently ${ limits.resources.core.limit } queries remain`);\n\t}\n\n\treturn !hasAuth;\n}\n\nexport default async function initAuthorization(repo: GitHub, travis: Travis = new Travis()) {\n\tlet appAuth: AuthResponse;\n\n\tif (!travis.isAuthorized()) {\n\t\tlogger.info('Creating a temporary authorization token in GitHub for Travis');\n\t\tawait travis.createAuthorization(repo);\n\t}\n\n\ttry {\n\t\tconst travisRepo = await travis.fetchRepository(repo.toString());\n\t\tconst travisEnvVars = await travisRepo.listEnvironmentVariables();\n\n\t\tif (await shouldCreateGithubAuth(travisEnvVars, repo)) {\n\t\t\tlogger.info('Creating an OAuth token for GitHub queries');\n\t\t\tappAuth = await repo.createAuthorization({\n\t\t\t\tnote: 'Authorization for Travis to call GitHub APIs',\n\t\t\t\tfingerprint: repo.toString()\n\t\t\t});\n\n\t\t\tconst tokenStr = JSON.stringify({\n\t\t\t\ttype: 'oauth',\n\t\t\t\ttoken: appAuth.token\n\t\t\t});\n\t\t\tawait travisRepo.setEnvironmentVariables({ name: env.githubAuthName, value: tokenStr, isPublic: false });\n\t\t}\n\t}\n\tcatch (e) {\n\t\tif (appAuth) {\n\t\t\tawait repo.deleteAuthorization(appAuth.id);\n\t\t}\n\t\tthrow e;\n\t}\n\tfinally {\n\t\tlogger.info('Removing temporary authorization token from GitHub');\n\t\tawait travis.deleteAuthorization(repo);\n\t}\n}\n"]}