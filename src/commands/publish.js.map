{"version":3,"file":"publish.js","sourceRoot":"","sources":["../../../src/commands/publish.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACA,mDAAgD;IAChD,8BAAgC;IAYhC,6BAAmC,IAAS;;0BAErC,MAAM,EACR,OAAO;;;4BAFM,qBAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAA;;mCAAjC,SAAiC;iCACnC,uBAAS,EAAE;kCACZ,kBAAiB,QAAW;wBAE1C,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;4BACZ,OAAO,IAAI,kBAAiB,MAAS,CAAC;wBACvC,CAAC;wBAED,sBAAO,OAAO,EAAC;;;;KACf;IAED,iBAAsC,OAAgB;;gBAC/C,WAAW,EACT,MAAM,EAAE,IAAI;;;;sCADA,OAAO,OAAO,CAAC,WAAW,KAAK,UAAU,GAAG,OAAO,CAAC,WAAW,EAAE,GAAG,OAAO,CAAC,WAAW;iCAClF,OAAO,gBAAP,OAAO;wBAEhC,EAAE,CAAC,CAAC,WAAW,KAAK,QAAQ,IAAI,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC;4BAC3D,YAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;4BACjC,MAAM,gBAAC;wBACR,CAAC;wBAEkB,qBAAM,IAAI,CAAC,eAAe,EAAE,EAAA;;qCAA5B,SAA4B;wBAC/C,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;4BACjB,YAAM,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;4BACnD,MAAM,gBAAC;wBACR,CAAC;wBAED,EAAE,CAAC,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC;4BAC/B,YAAM,CAAC,IAAI,CAAC,mBAAkB,IAAI,CAAC,cAAiB,CAAC,CAAC;wBACvD,CAAC;wBACD,IAAI,CAAC,CAAC;4BACL,YAAM,CAAC,IAAI,CAAC,gBAAe,IAAI,CAAC,cAAc,wBAAsB,CAAC,CAAC;wBACvE,CAAC;wBAED,qBAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,SAAS,CAAC,EAAA;;wBAA5D,SAA4D,CAAC;wBAG7D,qBAAM,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAA;;wBAAvB,SAAuB,CAAC;wBAClB,KAAA,CAAA,KAAA,IAAI,CAAA,CAAC,MAAM,CAAA;wBAAC,qBAAM,mBAAmB,CAAC,IAAI,CAAC,EAAA;4BAAjD,qBAAM,cAAY,SAA+B,EAAC,EAAA;;wBAAlD,SAAkD,CAAC;6BAE/C,CAAA,WAAW,KAAK,SAAS,CAAA,EAAzB,wBAAyB;wBAC5B,qBAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAA;;wBAAvB,SAAuB,CAAC;;;;;;KAEzB;IA/BD,0BA+BC","sourcesContent":["import Git from '../util/Git';\nimport { gitCommit } from '../util/environment';\nimport { logger } from '../log';\n\nexport type PublishMode = 'publish' | 'commit' | 'skip';\n\nexport interface Options {\n\tbranch: string;\n\tpublishMode: (() => PublishMode) | PublishMode;\n\trepo: Git;\n\tusername?: string;\n\tuseremail?: string;\n}\n\nasync function createCommitMessage(repo: Git): Promise<string> {\n\tconst username = await repo.getConfig('user.name');\n\tconst commit = gitCommit();\n\tlet message = `Published by ${ username }`;\n\n\tif (commit) {\n\t\tmessage += ` from commit ${ commit }`;\n\t}\n\n\treturn message;\n}\n\nexport default async function publish(options: Options) {\n\tconst publishMode = typeof options.publishMode === 'function' ? options.publishMode() : options.publishMode;\n\tconst { branch, repo } = options;\n\n\tif (publishMode !== 'commit' && publishMode !== 'publish') {\n\t\tlogger.info('skipping publish.');\n\t\treturn;\n\t}\n\n\tconst hasChanges = await repo.areFilesChanged();\n\tif (!hasChanges) {\n\t\tlogger.info('No files changed. Skipping publish.');\n\t\treturn;\n\t}\n\n\tif (publishMode === 'publish') {\n\t\tlogger.info(`Publishing to ${ repo.cloneDirectory }`);\n\t}\n\telse {\n\t\tlogger.info(`Committing ${ repo.cloneDirectory }. Skipping publish.`);\n\t}\n\n\tawait repo.ensureConfig(options.username, options.useremail);\n\n\t// TODO check pre-requisites: cloneDir should exist (from sync); should be on branch (gh-pages);\n\tawait repo.add('--all');\n\tawait repo.commit(await createCommitMessage(repo));\n\n\tif (publishMode === 'publish') {\n\t\tawait repo.push(branch);\n\t}\n}\n"]}