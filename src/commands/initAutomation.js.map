{"version":3,"file":"initAutomation.js","sourceRoot":"","sources":["../../../src/commands/initAutomation.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../log';\nimport GitHub, { AuthResponse } from '../util/GitHub';\nimport { existsSync, createReadStream, createWriteStream } from 'fs';\nimport { createDeployKey, encryptData, decryptData } from '../util/crypto';\nimport Travis from '../util/Travis';\nimport { equal } from '../util/streams';\nimport * as env from '../util/environment';\n\nexport default async function setupAutomation(\n\trepo: GitHub,\n\tdeployKeyFile = env.keyFile(),\n\tencryptedKeyFile = env.encryptedKeyFile(deployKeyFile)\n) {\n\tlet auth: AuthResponse = null;\n\n\tasync function setup() {\n\t\tlogger.info(`Setting up auto publish for ${ repo.toString() }`);\n\t\tif (existsSync(deployKeyFile)) {\n\t\t\tthrow new Error('Deploy key already exists');\n\t\t}\n\t\tlogger.info('Creating a deployment key');\n\t\tconst keys = await createDeployKey(deployKeyFile);\n\n\t\tlogger.info('Encrypting deployment key');\n\t\tconst enc = encryptData(createReadStream(keys.privateKey));\n\t\tawait new Promise(function (resolve) {\n\t\t\tenc.encrypted.pipe(createWriteStream(encryptedKeyFile))\n\t\t\t\t.on('close', function () {\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t});\n\n\t\tlogger.info('Creating a temporary authorization token in GitHub for Travis');\n\t\tauth = await repo.createAuthorizationToken('temporary token for travis cli');\n\t\tconst travis = new Travis();\n\t\tlogger.info('Authenticating with Travis');\n\t\tawait travis.authenticate(auth.token);\n\t\tlogger.debug('Fetching Travis repository information');\n\t\tconst travisRepo = await travis.fetchRepository(repo.toString());\n\n\t\tlogger.info('Registering environment variables');\n\t\tawait travisRepo.setEnvironmentVariables(\n\t\t\t{ name: env.decryptKeyName(), value: enc.key, isPublic: false },\n\t\t\t{ name: env.decryptIvName(), value: enc.iv, isPublic: false }\n\t\t);\n\n\t\tlogger.info(`Confirm decrypt deploy key`);\n\t\tawait equal(decryptData(createReadStream(encryptedKeyFile), enc.key, enc.iv), createReadStream(keys.privateKey));\n\n\t\tlogger.info('Adding deployment key to GitHub');\n\t\tawait repo.addDeployKey(keys.publicKey, 'Auto-created Travis Deploy Key', false);\n\n\t\tlogger.info('');\n\t\tlogger.info(`A new encrypted deploy key has been created at ${ encryptedKeyFile }.`);\n\t\tlogger.info(`Please commit this to your GitHub repository. The unencrypted keys \"${ keys.publicKey }\"`);\n\t\tlogger.info(`and \"${ keys.privateKey }\" may be deleted.`);\n\t\tlogger.info(`Variables to decrypt this key have been added to your Travis repository with the name`);\n\t\tlogger.info(`\"${ env.decryptKeyName() } and ${ env.decryptIvName() }.`);\n\t\tlogger.info('To begin publishing this site please add the DEPLOY_DOCS environment variable to Travis');\n\t\tlogger.info('and set its value to \"publish\"');\n\n\t\treturn {\n\t\t\tdecipher: {\n\t\t\t\tkey: enc.key,\n\t\t\t\tiv: enc.iv\n\t\t\t},\n\t\t\tkeys: {\n\t\t\t\tencryptedKey: encryptedKeyFile,\n\t\t\t\tpublicKey: keys.publicKey,\n\t\t\t\tprivateKey: keys.privateKey\n\t\t\t}\n\t\t};\n\t}\n\n\tasync function cleanup() {\n\t\tif (repo && auth) {\n\t\t\tlogger.info('Removing temporary authorization token from GitHub');\n\t\t\tawait repo.removeAuthorizationToken(auth.id);\n\t\t}\n\t}\n\n\tconst promise = setup();\n\treturn promise.then(cleanup, cleanup).then(() => promise);\n}\n"]}