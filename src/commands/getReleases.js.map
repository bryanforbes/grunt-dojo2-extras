{"version":3,"file":"getReleases.js","sourceRoot":"","sources":["../../../src/commands/getReleases.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACA,+BAAiC;IACjC,yBAAgC;IAChC,6BAA4B;IAS5B,wBAA+B,IAAY,EAAE,OAAe,EAAE,OAAe;QAC5E,MAAM,CAAC,WAAI,CAAC,IAAI,EAAM,OAAO,SAAM,OAAU,CAAC,CAAA;IAC/C,CAAC;IAFD,wCAEC;IAKD,wBAA+B,IAAY,EAAE,OAAe,EAAE,OAAe;QAC5E,MAAM,CAAC,WAAI,CAAC,IAAI,EAAM,OAAO,SAAM,OAAO,UAAQ,CAAC,CAAC;IACrD,CAAC;IAFD,wCAEC;IAOD,oCAA2C,OAAe,EAAE,SAAiB;QAC5E,MAAM,CAAC,UAAC,OAAgB;YACvB,MAAM,CAAC,CAAC,eAAU,CAAC,cAAc,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QACtE,CAAC,CAAC;IACH,CAAC;IAJD,gEAIC;IAOD,oCAA2C,OAAe,EAAE,SAAiB;QAC5E,MAAM,CAAC,UAAC,OAAgB;YACvB,MAAM,CAAC,CAAC,eAAU,CAAC,cAAc,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QACtE,CAAC,CAAC;IACH,CAAC;IAJD,gEAIC;IAOD,sBAA6B,QAAiB,EAAE,KAAa,EAAE,KAAgB;QAC9E,MAAM,CAAC,KAAK,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IACnC,CAAC;IAFD,oCAEC;IAMD,6BAAoC,IAAY;QAC/C,MAAM,CAAC,UAAC,OAAgB;YACvB,IAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACxC,CAAC,CAAC;IACH,CAAC;IALD,kDAKC;IAQD,qBAA0C,IAAY,EAAE,OAA6B;QAA7B,wBAAA,EAAA,YAA6B;;;;4BAC5E,qBAAM,IAAI,CAAC,aAAa,EAAE,EAAA;4BAAlC,sBAAO,CAAC,SAA0B,CAAC;6BACjC,MAAM,CAAC,UAAU,OAAO;4BACxB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBACnC,CAAC,CAAC;6BACD,IAAI,CAAC,UAAU,CAAU,EAAE,CAAU;4BACrC,IAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;4BAClC,IAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;4BACnC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;wBAC1C,CAAC,CAAC;6BACD,MAAM,CAAC,UAAU,OAAgB,EAAE,KAAa,EAAE,KAAgB;4BAClE,GAAG,CAAC,CAAiB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;gCAAvB,IAAM,MAAM,gBAAA;gCAChB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;oCACpC,MAAM,CAAC,KAAK,CAAC;gCACd,CAAC;6BACD;4BACD,MAAM,CAAC,IAAI,CAAC;wBACb,CAAC,CAAC,EAAC;;;;KACJ;IAlBD,8BAkBC","sourcesContent":["import GitHub, { Release } from '../util/GitHub';\nimport * as semver from 'semver';\nimport { existsSync } from 'fs';\nimport { join } from 'path';\n\nexport interface ReleaseFilter {\n\t(release: Release, index: number, array: Release[]): boolean;\n}\n\n/**\n * creates a path to HTML API docs\n */\nexport function getHtmlApiPath(base: string, project: string, version: string) {\n\treturn join(base, `${ project }/${ version }`)\n}\n\n/**\n * creates a path to JSON API docs\n */\nexport function getJsonApiPath(base: string, project: string, version: string) {\n\treturn join(base, `${ project }-${ version }.json`);\n}\n\n/**\n * @param project project name\n * @param directory the base directory where html api docs are stored\n * @return a filter for existing html api docs\n */\nexport function createHtmlApiMissingFilter(project: string, directory: string): ReleaseFilter {\n\treturn (release: Release) => {\n\t\treturn !existsSync(getHtmlApiPath(directory, project, release.name));\n\t};\n}\n\n/**\n * @param project project name\n * @param directory the base directory where json api docs are stored\n * @return a filter for existing json api docs\n */\nexport function createJsonApiMissingFilter(project: string, directory: string): ReleaseFilter {\n\treturn (release: Release) => {\n\t\treturn !existsSync(getJsonApiPath(directory, project, release.name));\n\t};\n}\n\n/**\n * A filters only the latest\n * @param index the index of the release\n * @return if the release is the latest\n */\nexport function latestFilter(_release: Release, index: number, array: Release[]) {\n\treturn index === array.length - 1;\n}\n\n/**\n * @param comp a semver comparison\n * @return a filter to check if the release satisfies the semver\n */\nexport function createVersionFilter(comp: string): ReleaseFilter {\n\treturn (release: Release) => {\n\t\tconst version = semver.clean(release.name);\n\t\treturn semver.satisfies(version, comp);\n\t};\n}\n\n/**\n * Get a list of GitHub releases that pass the supplied filters\n * @param repo the GitHub repository\n * @param filters Release filters to apply to the release\n * @return a list of releases\n */\nexport default async function getReleases(repo: GitHub, filters: ReleaseFilter[] = []): Promise<Release[]> {\n\treturn (await repo.fetchReleases())\n\t\t.filter(function (release) {\n\t\t\treturn semver.clean(release.name);\n\t\t})\n\t\t.sort(function (a: Release, b: Release) {\n\t\t\tconst left = semver.clean(a.name);\n\t\t\tconst right = semver.clean(b.name);\n\t\t\treturn semver.compare(left, right, true);\n\t\t})\n\t\t.filter(function (release: Release, index: number, array: Release[]) {\n\t\t\tfor (const filter of filters) {\n\t\t\t\tif (!filter(release, index, array)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n}\n"]}