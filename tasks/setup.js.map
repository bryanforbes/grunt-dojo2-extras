{"version":3,"file":"setup.js","sourceRoot":"","sources":["../../tasks/setup.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACA,sDAAiD;IACjD,6CAAwC;IACxC,sDAAiD;IACjD,4EAAuE;IACvE,kFAA6E;IAS7E,mBAAmB,IAAqB,EAAE,KAAa;QACtD,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAU;YACrC,QAAQ,EAAE,KAAK,CAAC,MAAM,CAAC,GAAG,CAAS,iBAAiB,CAAC;YACrD,QAAQ,EAAE,KAAK,CAAC,MAAM,CAAC,GAAG,CAAS,iBAAiB,CAAC;SACrD,CAAC,CAAC;QACG,IAAA,4CAA+C,EAA7C,cAAI,EAAE,gBAAK,CAAmC;QACtD,IAAM,IAAI,GAAG,IAAI,gBAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACrC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC;YACrB,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE,OAAO,CAAC,QAAQ;YAC1B,QAAQ,EAAE,OAAO,CAAC,QAAQ;SAC1B,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAED,OAAS,UAAU,KAAa;QAC/B;;;;oBACO,IAAI,GAAG,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;oBACpC,WAAO,wBAAc,CAAC,IAAI,CAAC,EAAC;;;SAC5B;QAED;;;;oBACO,IAAI,GAAG,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;oBACpC,WAAO,2BAAiB,CAAC,IAAI,CAAC,EAAC;;;SAC/B;QAED,KAAK,CAAC,iBAAiB,CAAC,aAAa,EAAE,uBAAa,CAAC,eAAe,CAAC,CAAC,CAAC;QACvE,KAAK,CAAC,iBAAiB,CAAC,WAAW,EAAE,uBAAa,CAAC,kBAAkB,CAAC,CAAC,CAAC;IACzE,CAAC,CAAC","sourcesContent":["import IMultiTask = grunt.task.IMultiTask;\nimport wrapAsyncTask from './util/wrapAsyncTask';\nimport GitHub from '../src/util/GitHub';\nimport getGithubSlug from './util/getGithubSlug';\nimport initDeployment from '../src/commands/initialize/initDeployment';\nimport initAuthorization from '../src/commands/initialize/initAuthorization';\n\ninterface Options {\n\tpassword?: string;\n\trepo?: string;\n\towner?: string;\n\tusername?: string;\n}\n\nfunction getGitHub(task: IMultiTask<any>, grunt: IGrunt) {\n\tconst options = task.options<Options>({\n\t\tpassword: grunt.config.get<string>('github.password'),\n\t\tusername: grunt.config.get<string>('github.username')\n\t});\n\tconst { name, owner } = getGithubSlug(options, grunt);\n\tconst repo = new GitHub(owner, name);\n\trepo.api.authenticate({\n\t\ttype: 'basic',\n\t\tpassword: options.password,\n\t\tusername: options.username\n\t});\n\treturn repo;\n}\n\nexport = function (grunt: IGrunt) {\n\tasync function setupDeployment(this: IMultiTask<any>) {\n\t\tconst repo = getGitHub(this, grunt);\n\t\treturn initDeployment(repo);\n\t}\n\n\tasync function setupAuthorization(this: IMultiTask<any>) {\n\t\tconst repo = getGitHub(this, grunt);\n\t\treturn initAuthorization(repo);\n\t}\n\n\tgrunt.registerMultiTask('setupDeploy', wrapAsyncTask(setupDeployment));\n\tgrunt.registerMultiTask('setupAuth', wrapAsyncTask(setupAuthorization));\n};\n"]}