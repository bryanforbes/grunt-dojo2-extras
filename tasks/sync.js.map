{"version":3,"file":"sync.js","sourceRoot":"","sources":["../../tasks/sync.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACA,6CAAoE;IACpE,sDAAiD;IACjD,sDAAiD;IACjD,6CAAwC;IACxC,uCAAkC;IAClC,kCAAoC;IAMpC,oBAA0B,OAAY,EAAE,KAAa;;oBAK5C,IAAI,EAAE,KAAK,EAEZ,IAAI,EAKL,GAAG;;;;wBAXT,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;4BACjB,MAAM,KAAC,OAAO,CAAC,GAAG,EAAC;wBACpB,CAAC;6BAEuB,uBAAa,CAAC,OAAO,EAAE,KAAK,CAAC;wBACrD,EAAE,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC;mCACN,IAAI,gBAAM,CAAC,KAAK,EAAE,IAAI,CAAC;4BACpC,MAAM,KAAC,IAAI,CAAC,GAAG,EAAC;wBACjB,CAAC;wBAED,YAAM,CAAC,IAAI,CAAC,sEAAsE,CAAC,CAAC;8BACxE,IAAI,aAAG,EAAE;wBACd,WAAM,GAAG,CAAC,SAAS,CAAC,mBAAmB,CAAC,EAAA;4BAA/C,WAAO,SAAwC,EAAC;;;;KAChD;IAED,OAAS,UAAU,KAAa;QAC/B;;oBACO,OAAO;;;;sCAAG,IAAI,CAAC,OAAO,CAAM,EAAE,CAAC;4BACrC,KAAA,OAAO,CAAA;4BAAO,WAAM,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC,EAAA;;4BAA9C,GAAQ,GAAG,GAAG,SAAgC,CAAC;4BAC/C,WAAM,cAAI,CAAe,OAAO,CAAC,EAAA;;4BAAjC,SAAiC,CAAC;;;;;SAClC;QAED,KAAK,CAAC,iBAAiB,CAAC,MAAM,EAAE,uBAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC","sourcesContent":["import IMultiTask = grunt.task.IMultiTask;\nimport sync, { Options as SyncOptions } from '../src/commands/sync';\nimport wrapAsyncTask from './util/wrapAsyncTask';\nimport getGithubSlug from './util/getGithubSlug';\nimport GitHub from '../src/util/GitHub';\nimport Git from '../src/util/Git';\nimport { logger } from '../src/log';\n\n/**\n * Resolve the target repository URL using grunt and the state of the environment. Essentially we want to use the\n * ssh+git repository if we think we have credentials and use the https repository otherwise.\n */\nasync function getRepoUrl(options: any, grunt: IGrunt): Promise<string> {\n\tif (options.url) {\n\t\treturn options.url;\n\t}\n\n\tconst { name, owner } = getGithubSlug(options, grunt);\n\tif (name && owner) {\n\t\tconst repo = new GitHub(owner, name);\n\t\treturn repo.url;\n\t}\n\n\tlogger.info('Repository not explicitly defined. Using current git repository url.');\n\tconst git = new Git();\n\treturn await git.getConfig('remote.origin.url');\n}\n\nexport = function (grunt: IGrunt) {\n\tasync function syncTask(this: IMultiTask<any>) {\n\t\tconst options = this.options<any>({});\n\t\toptions.url = await getRepoUrl(options, grunt);\n\t\tawait sync(<SyncOptions> options);\n\t}\n\n\tgrunt.registerMultiTask('sync', wrapAsyncTask(syncTask));\n};\n"]}