{"version":3,"file":"prebuild.js","sourceRoot":"","sources":["../../../../tests/unit/tasks/prebuild.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,6CAA+C;IAC/C,2CAA6C;IAE7C,6BAA+B;IAC/B,+BAA6B;IAC7B,wDAA2E;IAC3E,8CAA6D;IAE7D,IAAI,QAAa,CAAC;IAElB,IAAM,iBAAiB,GAAG,YAAI,EAAE,CAAC;IACjC,IAAM,oBAAoB,GAAG,YAAI,EAAE,CAAC;IACpC,IAAM,UAAU,GAAG,EAAE,IAAI,EAAE,YAAI,EAAE,EAAE,CAAC;IACpC,IAAM,gBAAgB,GAAG,YAAI,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;IAErD,aAAa,CAAC;QACb,IAAI,EAAE,gBAAgB;QAEtB,KAAK;YACJ,+BAAkB,EAAE,CAAC;YACrB,gBAAgB,CAAC,OAAO,EAAE,CAAC;QAC5B,CAAC;QAED,UAAU;YACT,QAAQ,GAAG,oBAAU,CAAC,gBAAgB,EAAE;gBACvC,sBAAsB,EAAE,EAAE,OAAO,EAAE,iBAAiB,EAAE;gBACtD,kCAAkC,EAAE,EAAE,OAAO,EAAE,oBAAoB,EAAE;gBACrE,YAAY,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE;aACpC,CAAC,CAAC;QACJ,CAAC;QAED,SAAS;YACR,gBAAgB,CAAC,KAAK,EAAE,CAAC;YACzB,iBAAiB,CAAC,KAAK,EAAE,CAAC;YAC1B,oBAAoB,CAAC,KAAK,EAAE,CAAC;YAC7B,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,CAAC;QAED,kBAAkB,EAAE,CAAC;YACpB,kCAAkC,IAAU,EAAE,SAAkB;gBAC/D,6BAAqB,CAAC,iBAAiB,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE;oBACtD,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;oBAC3C,MAAM,CAAC,MAAM,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;oBAC/C,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACf,MAAM,CAAC,MAAM,CACZ,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,EAClD,+CAA+C,CAC/C,CAAC;oBACH,CAAC;oBACD,IAAI,CAAC,CAAC;wBACL,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,mDAAmD,CAAC,CAAC;oBAC/F,CAAC;gBACF,CAAC,CAAC,CAAC;YACJ,CAAC;YAED,sBAAsB,IAAU,EAAE,uBAAgC;gBACjE,wBAAwB,CAAC,IAAI,EAAE,uBAAuB,CAAC,CAAC;gBAExD,oBAAoB,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC;gBAEvE,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAEhB,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAC7C,CAAC;YAED,MAAM,CAAC;gBACN,uBAAuB;oBACtB,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAC1B,CAAC;gBAED,mBAAmB;oBAClB,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBAC3B,CAAC;aACD,CAAC;QACH,CAAC,CAAC,EAAE;KACJ,CAAC,CAAC","sourcesContent":["import * as registerSuite from 'intern!object';\nimport * as assert from 'intern/chai!assert';\nimport * as Test from 'intern/lib/Test';\nimport * as grunt from 'grunt';\nimport { stub } from 'sinon';\nimport loadModule, { cleanupModuleMocks } from '../../_support/loadModule';\nimport { setupWrappedAsyncStub } from '../../_support/tasks';\n\nlet prebuild: any;\n\nconst wrapAsyncTaskStub = stub();\nconst decryptDeployKeyStub = stub();\nconst loggerStub = { info: stub() };\nconst registerTaskStub = stub(grunt, 'registerTask');\n\nregisterSuite({\n\tname: 'tasks/prebuild',\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t\tregisterTaskStub.restore();\n\t},\n\n\tbeforeEach() {\n\t\tprebuild = loadModule('tasks/prebuild', {\n\t\t\t'./util/wrapAsyncTask': { default: wrapAsyncTaskStub },\n\t\t\t'../src/commands/decryptDeployKey': { default: decryptDeployKeyStub },\n\t\t\t'../src/log': { logger: loggerStub }\n\t\t});\n\t},\n\n\tafterEach() {\n\t\tregisterTaskStub.reset();\n\t\twrapAsyncTaskStub.reset();\n\t\tdecryptDeployKeyStub.reset();\n\t\tloggerStub.info.reset();\n\t},\n\n\t'decryptDeployKey': (() => {\n\t\tfunction assertInWrappedAsyncStub(test: Test, shouldLog: boolean) {\n\t\t\tsetupWrappedAsyncStub(wrapAsyncTaskStub, test.async(), () => {\n\t\t\t\tassert.isTrue(registerTaskStub.calledOnce);\n\t\t\t\tassert.isTrue(decryptDeployKeyStub.calledOnce);\n\t\t\t\tif (shouldLog) {\n\t\t\t\t\tassert.isTrue(\n\t\t\t\t\t\tloggerStub.info.calledWith('Decrypted deploy key'),\n\t\t\t\t\t\t'Should have logged that the key was decrypted'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tassert.isTrue(loggerStub.info.notCalled, 'Should not have logged that the key was decrypted');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfunction testPrebuild(test: Test, wasDecryptionSuccessful: boolean) {\n\t\t\tassertInWrappedAsyncStub(test, wasDecryptionSuccessful);\n\n\t\t\tdecryptDeployKeyStub.returns(Promise.resolve(wasDecryptionSuccessful));\n\n\t\t\tprebuild(grunt);\n\n\t\t\tassert.isTrue(wrapAsyncTaskStub.calledOnce);\n\t\t}\n\n\t\treturn {\n\t\t\t'successful decryption'(this: Test) {\n\t\t\t\ttestPrebuild(this, true);\n\t\t\t},\n\n\t\t\t'decryption failed'(this: Test) {\n\t\t\t\ttestPrebuild(this, false);\n\t\t\t}\n\t\t};\n\t})()\n});\n"]}