{"version":3,"file":"publish.js","sourceRoot":"","sources":["../../../../tests/unit/tasks/publish.ts"],"names":[],"mappings":"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","sourcesContent":["import * as registerSuite from 'intern!object';\nimport * as assert from 'intern/chai!assert';\nimport * as grunt from 'grunt';\nimport { stub, spy, SinonStub } from 'sinon';\nimport loadModule, { cleanupModuleMocks } from '../../_support/loadModule';\nimport { setupWrappedAsyncStub } from '../../_support/tasks';\n\nlet publish: any;\nlet gruntOptionStub: SinonStub;\n\nconst Git = class {\n\tconstructor() {}\n};\nconst GitSpy = spy(Git);\nconst publishStub = stub();\nconst hasGitCredentialsStub = stub();\nconst publishModeStub = stub();\nconst wrapAsyncTaskStub = stub();\nconst optionsStub = stub();\n\nregisterSuite({\n\tname: 'tasks/publish',\n\n\tbefore() {\n\t\tpublish = loadModule('tasks/publish', {\n\t\t\t'../src/commands/publish': { default: publishStub.returns(Promise.resolve()) },\n\t\t\t'../src/util/Git': { default: GitSpy },\n\t\t\t'./util/wrapAsyncTask': { default: wrapAsyncTaskStub },\n\t\t\t'../src/util/environment': {\n\t\t\t\thasGitCredentials: hasGitCredentialsStub,\n\t\t\t\tpublishMode: publishModeStub\n\t\t\t}\n\t\t});\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tgruntOptionStub = stub(grunt, 'option');\n\t\toptionsStub.yieldsTo('publishMode').returns({\n\t\t\tcloneDirectory: 'cloneDirectory',\n\t\t\tpublishMode: null,\n\t\t\trepo: null\n\t\t});\n\n\t},\n\n\tafterEach() {\n\t\tpublishStub.reset();\n\t\thasGitCredentialsStub.reset();\n\t\tpublishModeStub.reset();\n\t\tGitSpy.reset();\n\t\twrapAsyncTaskStub.reset();\n\t\toptionsStub.reset();\n\n\t\tgruntOptionStub.restore();\n\t},\n\n\t'publish task runs, has git credentials; eventually resolves'(this: any) {\n\t\tgruntOptionStub.returns('publishMode');\n\t\thasGitCredentialsStub.returns(true);\n\n\t\tsetupWrappedAsyncStub.call({\n\t\t\toptions: optionsStub\n\t\t}, wrapAsyncTaskStub, this.async(), () => {\n\t\t\tassert.isTrue(hasGitCredentialsStub.calledOnce, 'Should always check for git credentials');\n\t\t\tassert.isTrue(GitSpy.calledOnce, 'Should always create a git utility');\n\t\t\tassert.isTrue(publishStub.calledOnce, 'Should always call publish');\n\n\t\t\tassert.isTrue(publishModeStub.calledOnce, 'Should call publishMode when there are git credentials');\n\t\t});\n\n\t\tpublish(grunt);\n\n\t\tassert.isTrue(wrapAsyncTaskStub.calledOnce);\n\t},\n\n\t'publish task runs, has no git credentials; eventually resolves'(this: any) {\n\t\tsetupWrappedAsyncStub.call({\n\t\t\toptions: optionsStub\n\t\t}, wrapAsyncTaskStub, this.async(), () => {\n\t\t\tassert.isTrue(hasGitCredentialsStub.calledOnce, 'Should always check for git credentials');\n\t\t\tassert.isTrue(GitSpy.calledOnce, 'Should always create a git utility');\n\t\t\tassert.isTrue(publishStub.calledOnce, 'Should always call publish');\n\n\t\t\tassert.isTrue(publishModeStub.notCalled, 'Shouldn\\'t call publish mode when there are no git credentials');\n\t\t});\n\n\t\tpublish(grunt);\n\n\t\tassert.isTrue(wrapAsyncTaskStub.calledOnce);\n\t}\n});\n"]}