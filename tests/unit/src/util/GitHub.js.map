{"version":3,"file":"GitHub.js","sourceRoot":"","sources":["../../../../../tests/unit/src/util/GitHub.ts"],"names":[],"mappings":"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","sourcesContent":["import * as registerSuite from 'intern!object';\nimport * as assert from 'intern/chai!assert';\nimport loadModule, { cleanupModuleMocks } from '../../../_support/loadModule';\nimport { spy, stub, SinonSpy, SinonStub } from 'sinon';\nimport GitHub from 'src/util/GitHub';\n\nlet Module: any;\nlet github: GitHub;\nlet githubAuthStub: SinonStub;\nlet hasGitCredentialsStub: SinonStub;\nlet authorizationGetAllStub: SinonStub;\nlet GitHubApiSpy: SinonSpy;\n\nregisterSuite({\n\tname: 'util/GitHub',\n\n\tbefore() {\n\t\tgithubAuthStub = stub();\n\t\thasGitCredentialsStub = stub();\n\t\tauthorizationGetAllStub = stub();\n\n\t\tconst GitHubApi = class {\n\t\t\tget auth() {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tauthenticate: SinonStub = stub();\n\t\t\tauthorization = {\n\t\t\t\tcreate: stub().returns({ data: 'create' }),\n\t\t\t\tdelete: stub(),\n\t\t\t\tgetAll: authorizationGetAllStub\n\t\t\t};\n\t\t\trepos = {\n\t\t\t\tcreateKey: stub().returns({ data: 'createKey' }),\n\t\t\t\tdeleteKey: stub(),\n\t\t\t\tgetReleases: stub().returns({ data: 'getReleases' })\n\t\t\t};\n\t\t};\n\n\t\tGitHubApiSpy = spy(GitHubApi);\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tModule = loadModule('src/util/GitHub', {\n\t\t\t'./environment': {\n\t\t\t\tgithubAuth: githubAuthStub,\n\t\t\t\thasGitCredentials: hasGitCredentialsStub\n\t\t\t},\n\t\t\t'github': GitHubApiSpy\n\t\t});\n\n\t\tgithub = new Module('dojo', 'grunt-dojo2-extras');\n\t},\n\n\tafterEach() {\n\t\tgithubAuthStub.reset();\n\t\thasGitCredentialsStub.reset();\n\t\tauthorizationGetAllStub.reset();\n\t\tGitHubApiSpy.reset();\n\t},\n\n\t'constructor': {\n\t\t'without owner; throws Error'() {\n\t\t\ttry {\n\t\t\t\tnew Module();\n\t\t\t} catch (e) {\n\t\t\t\tassert.equal(e.message, 'A repo owner must be specified');\n\t\t\t}\n\t\t},\n\n\t\t'without name; throws Error'() {\n\t\t\ttry {\n\t\t\t\tnew Module('dojo');\n\t\t\t} catch (e) {\n\t\t\t\tassert.equal(e.message, 'A repo name must be specified');\n\t\t\t}\n\t\t},\n\n\t\t'properly initialized; _api, owner, and name set'() {\n\t\t\tassert.isTrue(GitHubApiSpy.calledOnce);\n\t\t\tassert.strictEqual(github.owner, 'dojo');\n\t\t\tassert.strictEqual(github.name, 'grunt-dojo2-extras');\n\t\t}\n\t},\n\n\t'get api'() {\n\t\tgithub.isApiAuthenticated = stub();\n\n\t\tconst api = github.api;\n\n\t\tassert.strictEqual(api, github._api);\n\t},\n\n\t'get url': (() => {\n\t\treturn {\n\t\t\t'has git credentials; returns ssh url'() {\n\t\t\t\tconst getSshUrl = stub(github, 'getSshUrl');\n\n\t\t\t\thasGitCredentialsStub.returns(true);\n\n\t\t\t\tassertCredentials();\n\n\t\t\t\tassert.isTrue(getSshUrl.calledOnce);\n\n\t\t\t\tgetSshUrl.reset();\n\t\t\t},\n\n\t\t\t'doesn\\'t have git credentials; returns https url'() {\n\t\t\t\tconst getHttpsUrl = stub(github, 'getHttpsUrl');\n\n\t\t\t\thasGitCredentialsStub.returns(false);\n\n\t\t\t\tassertCredentials();\n\n\t\t\t\tassert.isTrue(getHttpsUrl.calledOnce);\n\n\t\t\t\tgetHttpsUrl.reset();\n\t\t\t}\n\t\t};\n\n\t\tfunction assertCredentials() {\n\t\t\tconst url = github.url;\n\n\t\t\tassert.isTrue(hasGitCredentialsStub.calledOnce);\n\n\t\t\treturn url;\n\t\t}\n\t})(),\n\n\tasync createAuthorization() {\n\t\tconst createAuth = await github.createAuthorization({});\n\n\t\tassert.strictEqual(createAuth, 'create');\n\t},\n\n\tasync createKey() {\n\t\tconst createKey = await github.createKey('key');\n\t\tconst api = GitHubApiSpy.lastCall.returnValue;\n\n\t\tassert.strictEqual(createKey, 'createKey');\n\t\tassert.strictEqual(api.repos.createKey.lastCall.args[0].key, 'key');\n\t},\n\n\tdeleteAuthorization: (() => {\n\t\treturn {\n\t\t\tasync 'given numeric id; deleteAuthorization passes it as a string'() {\n\t\t\t\tconst api = await deleteAuthReturnSpy(2);\n\n\t\t\t\tassert.strictEqual(api.authorization.delete.lastCall.args[0].id, '2');\n\t\t\t},\n\n\t\t\tasync 'given string id; deleteAuthorization passes it intact'() {\n\t\t\t\tconst api = await deleteAuthReturnSpy('id');\n\n\t\t\t\tassert.strictEqual(api.authorization.delete.lastCall.args[0].id, 'id');\n\t\t\t}\n\t\t};\n\n\t\tasync function deleteAuthReturnSpy(id: string | number) {\n\t\t\tawait github.deleteAuthorization(id);\n\n\t\t\treturn GitHubApiSpy.lastCall.returnValue;\n\t\t}\n\t})(),\n\n\tdeleteKey: (() => {\n\t\treturn {\n\t\t\tasync 'given numeric id; deleteKey passes it as a string'() {\n\t\t\t\tconst api = await deleteKeyReturnSpy(2);\n\n\t\t\t\tassert.strictEqual(api.repos.deleteKey.lastCall.args[0].id, '2');\n\t\t\t},\n\n\t\t\tasync 'given string id; deleteKey passes it intact'() {\n\t\t\t\tconst api = await deleteKeyReturnSpy('id');\n\n\t\t\t\tassert.strictEqual(api.repos.deleteKey.lastCall.args[0].id, 'id');\n\t\t\t}\n\t\t};\n\n\t\tasync function deleteKeyReturnSpy(id: string | number) {\n\t\t\tawait github.deleteKey(id);\n\n\t\t\treturn GitHubApiSpy.lastCall.returnValue;\n\t\t}\n\t})(),\n\n\tasync fetchReleases() {\n\t\tconst fetchReleases = await github.fetchReleases();\n\t\tconst api = GitHubApiSpy.lastCall.returnValue;\n\n\t\tassert.strictEqual(fetchReleases, 'getReleases');\n\t\tassert.isTrue(api.repos.getReleases.calledOnce);\n\t},\n\n\tfindAuthorization: (() => {\n\t\tconst findAuthParams = {\n\t\t\tnote: 'temporary token for travis cli',\n\t\t\tscopes: [\n\t\t\t\t'read:org', 'user:email', 'repo_deployment', 'repo:status', 'public_repo', 'write:repo_hook'\n\t\t\t]\n\t\t};\n\t\tconst scope = { scopes: [ 'read:org' ] };\n\t\tconst note = { note: 'temporary token for travis cli' };\n\n\t\treturn {\n\t\t\tasync 'api.authorization.getAll returns no data; returns undefined'() {\n\t\t\t\tauthorizationGetAllStub.returns({});\n\n\t\t\t\tconst authGetAll = await assertAuthGetAllCalled({});\n\n\t\t\t\tassert.isUndefined(authGetAll);\n\t\t\t},\n\n\t\t\t// \tbranch params[name] is array\n\t\t\t// \t\tbranch auth[name] isn't array\n\t\t\t// \t\tbranch auth[name] is array\n\t\t\t// \t\t\tmember of params[name] exists in auth[name]\n\t\t\t// \tbranch params[name] not array\n\t\t\t// \t\tbranch expected === actual\n\t\t\t// \t\tbranch expected !== actual\n\t\t\t'api.authorization.getAll returns array of data': {\n\t\t\t\tasync 'getAll response data contain an array similar to params array member'() {\n\t\t\t\t\tauthorizationGetAllStub.returns({ data: [ findAuthParams ] });\n\n\t\t\t\t\tconst AuthGetAll = await assertAuthGetAllCalled(scope);\n\n\t\t\t\t\tassert.strictEqual(AuthGetAll, findAuthParams);\n\t\t\t\t},\n\n\t\t\t\tasync 'getAll response data do not contain an array'() {\n\t\t\t\t\tauthorizationGetAllStub.returns({ data: [ note ] });\n\n\t\t\t\t\tconst AuthGetAll = await assertAuthGetAllCalled(note);\n\n\t\t\t\t\tassert.strictEqual(AuthGetAll, note);\n\t\t\t\t},\n\n\t\t\t\tasync 'findAuthorization params contain no array'() {\n\t\t\t\t\tauthorizationGetAllStub.returns({ data: [ findAuthParams ] });\n\n\t\t\t\t\tconst AuthGetAll = await assertAuthGetAllCalled(note);\n\n\t\t\t\t\tassert.strictEqual(AuthGetAll, findAuthParams);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tasync function assertAuthGetAllCalled(params: any) {\n\t\t\tconst findAuth = await github.findAuthorization(params);\n\n\t\t\tassert.isTrue(authorizationGetAllStub.calledOnce);\n\n\t\t\treturn findAuth;\n\t\t}\n\t})(),\n\n\tisApiAuthenticated: {\n\t\t'not authenticated; calls githubAuth': {\n\t\t\t'githubAuth returns truthy; calls this._api.authenticate with return value'() {\n\t\t\t\tconst authValue = { user: 'dojo' };\n\n\t\t\t\tgithubAuthStub.returns(authValue);\n\n\t\t\t\tgithub.isApiAuthenticated();\n\n\t\t\t\tconst git = GitHubApiSpy.lastCall.returnValue;\n\n\t\t\t\tassert.isTrue(git.authenticate.calledOnce);\n\t\t\t\tassert.isTrue(git.authenticate.calledWith(authValue));\n\t\t\t},\n\n\t\t\t'githubAuth returns falsy; this._api.authenticate not called'() {\n\t\t\t\tgithub.isApiAuthenticated();\n\n\t\t\t\tconst git = GitHubApiSpy.lastCall.returnValue;\n\n\t\t\t\tassert.isTrue(git.authenticate.notCalled);\n\t\t\t}\n\t\t},\n\n\t\t'authenticated after first call; subsequent calls simply return API has OAuth token'() {\n\t\t\tlet authed = github.isApiAuthenticated();\n\n\t\t\tassert.isTrue(authed);\n\n\t\t\tauthed = github.isApiAuthenticated();\n\n\t\t\tassert.isTrue(authed);\n\t\t\tassert.isTrue(githubAuthStub.calledOnce);\n\t\t}\n\t},\n\n\tgetHttpsUrl() {\n\t\tconst getHttpsUrl = github.getHttpsUrl();\n\n\t\tassert.strictEqual(getHttpsUrl, 'https://github.com/dojo/grunt-dojo2-extras.git');\n\t},\n\n\tgetSshUrl() {\n\t\tconst getSshUrl = github.getSshUrl();\n\n\t\tassert.strictEqual(getSshUrl, 'git@github.com:dojo/grunt-dojo2-extras.git');\n\t},\n\n\ttoString() {\n\t\tconst toString = github.toString();\n\n\t\tassert.strictEqual(toString, 'dojo/grunt-dojo2-extras');\n\t}\n});\n"]}