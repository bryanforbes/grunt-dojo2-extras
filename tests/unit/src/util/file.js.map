{"version":3,"file":"file.js","sourceRoot":"","sources":["../../../../../tests/unit/src/util/file.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,6CAA+C;IAC/C,2CAA6C;IAC7C,2DAA8E;IAC9E,+BAAwC;IAExC,IAAI,MAAW,CAAC;IAChB,IAAI,cAAyB,CAAC;IAC9B,IAAI,eAA0B,CAAC;IAC/B,IAAI,cAAyB,CAAC;IAC9B,IAAI,QAAmB,CAAC;IAExB,aAAa,CAAC;QACb,IAAI,EAAE,WAAW;QAEjB,MAAM;YACL,cAAc,GAAG,YAAI,EAAE,CAAC;YACxB,eAAe,GAAG,YAAI,EAAE,CAAC;YACzB,cAAc,GAAG,YAAI,EAAE,CAAC;YACxB,QAAQ,GAAG,YAAI,EAAE,CAAC;QACnB,CAAC;QAED,KAAK;YACJ,+BAAkB,EAAE,CAAC;QACtB,CAAC;QAED,UAAU;YACT,MAAM,GAAG,oBAAU,CAAC,eAAe,EAAE;gBACpC,IAAI,EAAE;oBACL,UAAU,EAAE,cAAc;oBAC1B,WAAW,EAAE,eAAe;iBAC5B;gBACD,QAAQ,EAAE;oBACT,IAAI,EAAE,cAAc;iBACpB;gBACD,MAAM,EAAE;oBACP,IAAI,EAAE,QAAQ;iBACd;aACD,CAAC,CAAC;QACJ,CAAC;QAED,SAAS;YACR,cAAc,CAAC,KAAK,EAAE,CAAC;YACvB,eAAe,CAAC,KAAK,EAAE,CAAC;YACxB,cAAc,CAAC,KAAK,EAAE,CAAC;YACvB,QAAQ,CAAC,KAAK,EAAE,CAAC;QAClB,CAAC;QAED,iBAAiB,EAAE;YAClB,qDAAqD;gBACpD,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAE9B,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;gBAEhC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;gBACzC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAC1C,CAAC;YAED,yCAAyC;gBACxC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAE7B,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;gBAEhC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;YACnD,CAAC;YAED,kCAAkC;gBACjC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC7B,eAAe,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;gBAEpC,IAAM,OAAO,GAAG,MAAM,CAAC,iBAAiB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBAEzD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;gBACnD,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;gBAC1C,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;YACzC,CAAC;SACD;KACD,CAAC,CAAC","sourcesContent":["import * as registerSuite from 'intern!object';\nimport * as assert from 'intern/chai!assert';\nimport loadModule, { cleanupModuleMocks } from '../../../_support/loadModule';\nimport { stub, SinonStub } from 'sinon';\n\nlet module: any;\nlet existsSyncStub: SinonStub;\nlet mkdtempSyncStub: SinonStub;\nlet mkdirpSyncStub: SinonStub;\nlet joinStub: SinonStub;\n\nregisterSuite({\n\tname: 'util/file',\n\n\tbefore() {\n\t\texistsSyncStub = stub();\n\t\tmkdtempSyncStub = stub();\n\t\tmkdirpSyncStub = stub();\n\t\tjoinStub = stub();\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tmodule = loadModule('src/util/file', {\n\t\t\t'fs': {\n\t\t\t\texistsSync: existsSyncStub,\n\t\t\t\tmkdtempSync: mkdtempSyncStub\n\t\t\t},\n\t\t\t'mkdirp': {\n\t\t\t\tsync: mkdirpSyncStub\n\t\t\t},\n\t\t\t'path': {\n\t\t\t\tjoin: joinStub\n\t\t\t}\n\t\t});\n\t},\n\n\tafterEach() {\n\t\texistsSyncStub.reset();\n\t\tmkdtempSyncStub.reset();\n\t\tmkdirpSyncStub.reset();\n\t\tjoinStub.reset();\n\t},\n\n\tmakeTempDirectory: {\n\t\t'base directory does not exist; directory is created'() {\n\t\t\texistsSyncStub.returns(false);\n\n\t\t\tmodule.makeTempDirectory('dir');\n\n\t\t\tassert.isTrue(existsSyncStub.calledOnce);\n\t\t\tassert.isTrue(mkdirpSyncStub.calledOnce);\n\t\t},\n\n\t\t'prefix not provided; defaults to \"tmp-\"'() {\n\t\t\texistsSyncStub.returns(true);\n\n\t\t\tmodule.makeTempDirectory('dir');\n\n\t\t\tassert.isTrue(joinStub.calledWith('dir', 'tmp-'));\n\t\t},\n\n\t\t'value of mkdtempSync is returned'() {\n\t\t\texistsSyncStub.returns(true);\n\t\t\tmkdtempSyncStub.returns('temp_dir');\n\n\t\t\tconst tempDir = module.makeTempDirectory('dir', 'temp_');\n\n\t\t\tassert.isTrue(joinStub.calledWith('dir', 'temp_'));\n\t\t\tassert.isTrue(mkdtempSyncStub.calledOnce);\n\t\t\tassert.strictEqual(tempDir, 'temp_dir');\n\t\t}\n\t}\n});\n"]}