{"version":3,"file":"Git.js","sourceRoot":"","sources":["../../../../../tests/unit/src/util/Git.ts"],"names":[],"mappings":"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","sourcesContent":["import * as registerSuite from 'intern!object';\nimport * as assert from 'intern/chai!assert';\nimport loadModule, { cleanupModuleMocks } from '../../../_support/loadModule';\nimport { spy, stub, SinonStub } from 'sinon';\nimport Git from 'src/util/Git';\nimport * as env from 'src/util/environment';\nimport { throwWithError } from '../../../_support/util';\n\nlet Module: any;\nlet git: Git;\nlet promiseSpawnStub: SinonStub;\nlet promiseExecStub: SinonStub;\nlet execStub: SinonStub;\nlet toStringStub: SinonStub;\nlet existsSyncStub: SinonStub;\nlet chmodSyncStub: SinonStub;\n\nregisterSuite({\n\tname: 'util/Git',\n\n\tbefore() {\n\t\tpromiseSpawnStub = stub();\n\t\tpromiseExecStub = stub();\n\t\texecStub = stub();\n\t\ttoStringStub = stub();\n\t\texistsSyncStub = stub();\n\t\tchmodSyncStub = stub();\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tModule = loadModule('src/util/Git', {\n\t\t\t'./process': {\n\t\t\t\tpromiseSpawn: promiseSpawnStub,\n\t\t\t\tpromiseExec: promiseExecStub,\n\t\t\t\texec: execStub\n\t\t\t},\n\t\t\t'./streams': {\n\t\t\t\ttoString: toStringStub\n\t\t\t},\n\t\t\tfs: {\n\t\t\t\texistsSync: existsSyncStub,\n\t\t\t\tchmodSync: chmodSyncStub\n\t\t\t}\n\t\t});\n\n\t\tgit = new Module();\n\t},\n\n\tafterEach() {\n\t\tpromiseSpawnStub.reset();\n\t\tpromiseExecStub.reset();\n\t\texecStub.reset();\n\t\ttoStringStub.reset();\n\t\texistsSyncStub.reset();\n\t\tchmodSyncStub.reset();\n\t},\n\n\t'constructor': {\n\t\t'with params'() {\n\t\t\tconst gitWithArgs = new Module('dir', 'file');\n\t\t\tassert.equal(gitWithArgs.cloneDirectory, 'dir');\n\t\t\tassert.equal(gitWithArgs.keyFile, 'file');\n\t\t},\n\t\t'default params'() {\n\t\t\tassert.equal(git.cloneDirectory, process.cwd());\n\t\t\tassert.equal(git.keyFile, env.keyFile());\n\t\t}\n\t},\n\n\tasync add() {\n\t\tpromiseExecStub.withArgs('git add file1 file2', {\n\t\t\tsilent: false,\n\t\t\tcwd: git.cloneDirectory\n\t\t}).returns('pass');\n\n\t\tconst actual = git.add('file1', 'file2');\n\n\t\tassert.instanceOf(actual, Promise);\n\t\tassert.strictEqual(await actual, 'pass');\n\t},\n\n\tasync assert() {\n\t\tgit.isInitialized = () => false;\n\t\tgit.assert('url').then(\n\t\t\tthrowWithError('Should reject when the repository is not initialized'),\n\t\t\t(error: Error) => {\n\t\t\t\tassert.strictEqual(error.message,\n\t\t\t\t\t`Repository is not initialized at \"${ git.cloneDirectory }\"`);\n\t\t\t}\n\t\t);\n\n\t\tgit.isInitialized = () => true;\n\t\tgit.getConfig = stub().withArgs('remote.origin.url')\n\t\t\t.returns('url');\n\n\t\tgit.assert('other_url').then(\n\t\t\tthrowWithError('Should reject when the repository url is wrong'),\n\t\t\t(error: Error) => {\n\t\t\t\tassert.strictEqual(error.message,\n\t\t\t\t\t'Repository mismatch. Expected \"url\" to be \"other_url\".');\n\t\t\t}\n\t\t);\n\t\treturn git.assert('url');\n\t},\n\n\tasync checkout() {\n\t\tpromiseExecStub.withArgs('git checkout 1.2.3', {\n\t\t\tsilent: false,\n\t\t\tcwd: git.cloneDirectory\n\t\t}).returns(Promise.resolve('pass'));\n\n\t\tconst actual = git.checkout('1.2.3');\n\n\t\tassert.instanceOf(actual, Promise);\n\t\tassert.strictEqual(await actual, 'pass');\n\t},\n\n\tclone: {\n\t\t'If clone directory is not set; eventually rejects'() {\n\t\t\tdelete git.cloneDirectory;\n\t\t\treturn git.clone('url').then(\n\t\t\t\tthrowWithError('Should reject if clone directory is not set'),\n\t\t\t\t(error: Error) => {\n\t\t\t\t\tassert.equal(error.message, 'A clone directory must be set');\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\tasync 'Not initialized; assert not called, execSSHAgent called once, git.url === url'() {\n\t\t\tconst url = 'url';\n\t\t\tconst assertSpy = spy(git, 'assert');\n\t\t\tconst execSSHAgentStub = stub(git, 'execSSHAgent').returns(Promise.resolve());\n\t\t\tgit.isInitialized = () => false;\n\t\t\tawait git.clone(url);\n\t\t\tassert.isTrue(assertSpy.notCalled);\n\t\t\tassert.isTrue(execSSHAgentStub.called);\n\t\t\tassert.strictEqual(git.url, url);\n\t\t},\n\n\t\tasync 'Properly initialized; assert called once, execSSHAgent called once, git.url === url'() {\n\t\t\tconst url = 'url';\n\t\t\tconst assertStub = stub(git, 'assert');\n\t\t\tconst execSSHAgentStub = stub(git, 'execSSHAgent').returns(Promise.resolve());\n\t\t\tgit.isInitialized = () => true;\n\t\t\tawait git.clone(url);\n\t\t\tassert.isTrue(assertStub.called);\n\t\t\tassert.isTrue(execSSHAgentStub.called);\n\t\t\tassert.strictEqual(git.url, url);\n\t\t}\n\t},\n\n\tasync commit() {\n\t\tconst execSSHAgent = stub(git, 'execSSHAgent').returns(Promise.resolve());\n\t\tawait git.commit('message');\n\t\tassert.isTrue(execSSHAgent.calledOnce);\n\t\tassert.isTrue(execSSHAgent.calledWith('git', ['commit', '-m', '\"message\"'], { silent: false, cwd: git.cloneDirectory }));\n\t},\n\n\tcreateOrphan: {\n\t\t'If clone directory is not set; throws'() {\n\t\t\tdelete git.cloneDirectory;\n\t\t\tgit.createOrphan('branch').then(\n\t\t\t\tthrowWithError('Should throw when clone directory is not set'),\n\t\t\t\t(error: Error) => {\n\t\t\t\t\tassert.equal(error.message, 'A clone directory must be set');\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\tasync 'promiseExec called twice with proper options'() {\n\t\t\tconst execOptions = { silent: true, cwd: git.cloneDirectory };\n\t\t\tawait git.createOrphan('branch');\n\t\t\tassert.isTrue(promiseExecStub.calledTwice);\n\t\t\tassert.isTrue(promiseExecStub.calledWith('git checkout --orphan branch', execOptions));\n\t\t\tassert.isTrue(promiseExecStub.calledWith('git rm -rf .', execOptions));\n\t\t}\n\t},\n\n\tensureConfig: {\n\t\tasync 'hasConfig for user.name, user.email'() {\n\t\t\tgit.hasConfig = stub().returns(true);\n\t\t\tconst setConfig = git.setConfig = stub();\n\t\t\tawait git.ensureConfig();\n\t\t\tassert.isTrue(setConfig.notCalled);\n\t\t},\n\n\t\tasync '!hasConfig for user.name, user.email; default args set'() {\n\t\t\tgit.hasConfig = stub().returns(false);\n\t\t\tconst setConfig = git.setConfig = stub();\n\t\t\tawait git.ensureConfig();\n\t\t\tassert.isTrue(setConfig.calledWith('user.name', 'Travis CI'));\n\t\t\tassert.isTrue(setConfig.calledWith('user.email', 'support@sitepen.com'));\n\t\t},\n\n\t\tasync '!hasConfig for user.name, user.email; explicit args set'() {\n\t\t\tgit.hasConfig = stub().returns(false);\n\t\t\tconst setConfig = git.setConfig = stub();\n\t\t\tawait git.ensureConfig('name', 'email');\n\t\t\tassert.isTrue(setConfig.calledWith('user.name', 'name'));\n\t\t\tassert.isTrue(setConfig.calledWith('user.email', 'email'));\n\t\t}\n\t},\n\n\texecSSHAgent: {\n\t\tasync '!hasDeployCredentials; promiseSpawn called'() {\n\t\t\tconst command = 'git';\n\t\t\tconst args = [ 'status' ];\n\t\t\tconst opts = { silent: false };\n\t\t\tgit.hasDeployCredentials = () => false;\n\t\t\tawait git.execSSHAgent(command, args, opts);\n\t\t\tassert.isTrue(promiseSpawnStub.calledOnce);\n\t\t\tassert.isTrue(promiseSpawnStub.calledWith(command, args, opts));\n\t\t},\n\n\t\tasync 'hasDeployCredentials; chmodSync, promiseExec called'() {\n\t\t\tconst command = 'git';\n\t\t\tconst args = [ 'status' ];\n\t\t\tconst opts = { silent: false };\n\t\t\tgit.keyFile = 'key.file';\n\t\t\tgit.hasDeployCredentials = () => true;\n\t\t\tawait git.execSSHAgent(command, args, opts);\n\t\t\tassert.isTrue(chmodSyncStub.calledOnce);\n\t\t\tassert.isTrue(promiseExecStub.calledOnce);\n\t\t\tassert.isTrue(promiseExecStub.calledWith(`ssh-agent bash -c 'ssh-add key.file; git status'`, opts));\n\t\t}\n\t},\n\n\tasync getConfig() {\n\t\texecStub.withArgs('git config key', {\n\t\t\tsilent: true,\n\t\t\tcwd: git.cloneDirectory\n\t\t}).returns({ stdout: 'key' });\n\t\ttoStringStub.withArgs('key').returns('key');\n\n\t\tconst keyConfig = await git.getConfig('key');\n\n\t\tassert.isTrue(execStub.calledOnce);\n\t\tassert.isTrue(toStringStub.calledOnce);\n\t\tassert.strictEqual(keyConfig, 'key');\n\t},\n\n\tareFilesChanged: {\n\t\tbeforeEach() {\n\t\t\texecStub.withArgs('git status --porcelain', {\n\t\t\t\tsilent: true,\n\t\t\t\tcwd: git.cloneDirectory\n\t\t\t});\n\t\t},\n\t\tasync 'exec and toString each called once'() {\n\t\t\texecStub.returns({ stdout: '' });\n\t\t\ttoStringStub.returns('');\n\n\t\t\tawait git.areFilesChanged();\n\n\t\t\tassert.isTrue(execStub.calledOnce);\n\t\t\tassert.isTrue(toStringStub.calledOnce);\n\t\t},\n\t\tasync 'files are changed; returns true'() {\n\t\t\texecStub.returns({ stdout: 'changed' });\n\t\t\ttoStringStub.withArgs('changed').returns('changed');\n\n\t\t\tconst changed = await git.areFilesChanged();\n\n\t\t\tassert.isTrue(changed);\n\t\t},\n\t\tasync 'files are not changed; returns false'() {\n\t\t\texecStub.returns({ stdout: '' });\n\t\t\ttoStringStub.withArgs('').returns('');\n\n\t\t\tconst changed = await git.areFilesChanged();\n\n\t\t\tassert.isFalse(changed);\n\t\t}\n\t},\n\n\thasConfig: {\n\t\tasync 'has a configuration value'() {\n\t\t\tgit.getConfig = async () => 'config';\n\t\t\tconst hasConfig = await git.hasConfig('config');\n\t\t\tassert.isTrue(hasConfig);\n\t\t},\n\t\tasync 'has no configuration value'() {\n\t\t\tgit.getConfig = async () => '';\n\t\t\tconst hasConfig = await git.hasConfig('config');\n\t\t\tassert.isFalse(hasConfig);\n\t\t}\n\t},\n\n\thasDeployCredentials() {\n\t\tconst exists = existsSyncStub.withArgs(git.keyFile);\n\n\t\texists.returns(true);\n\t\tassert.isTrue(git.hasDeployCredentials());\n\n\t\texists.returns(false);\n\t\tassert.isFalse(git.hasDeployCredentials());\n\t},\n\n\tasync headRevision() {\n\t\tconst hash = '505b86ca8feb5295789720ef9d56cf016c217b0e';\n\n\t\texecStub.withArgs('git rev-parse HEAD', {\n\t\t\tsilent: false,\n\t\t\tcwd: git.cloneDirectory\n\t\t}).returns({ stdout: hash });\n\t\ttoStringStub.withArgs(hash)\n\t\t\t.returns(hash);\n\n\t\tconst revision = await git.headRevision();\n\n\t\tassert.isTrue(execStub.calledOnce);\n\t\tassert.isTrue(toStringStub.calledOnce);\n\n\t\tassert.strictEqual(revision, hash);\n\t},\n\n\tisInitialized: {\n\t\t'throws error if there is no cloneDirectory'() {\n\t\t\tgit.cloneDirectory = undefined;\n\t\t\tassert.throws(git.isInitialized);\n\n\t\t\ttry {\n\t\t\t\tgit.isInitialized();\n\t\t\t} catch (e) {\n\t\t\t\tassert.strictEqual(e.message, 'A clone directory must be set');\n\t\t\t}\n\t\t},\n\t\t'cloneDirectory exists but not counterpart .git directory; returns false'() {\n\t\t\texistsSyncStub.returns(false);\n\t\t\texistsSyncStub.withArgs(git.cloneDirectory).returns(true);\n\t\t\tassert.isFalse(git.isInitialized());\n\t\t},\n\t\t'cloneDirectory and .git directory exist; returns true'() {\n\t\t\texistsSyncStub.returns(true);\n\t\t\tassert.isTrue(git.isInitialized());\n\t\t}\n\t},\n\n\tpull() {\n\t\tconst execSSHAgentStub = git.execSSHAgent = stub();\n\n\t\tgit.pull('origin', 'master');\n\t\tassert.isTrue(execSSHAgentStub.calledWith('git', [ 'pull', 'origin', 'master' ], { cwd: git.cloneDirectory }));\n\n\t\tgit.pull();\n\t\tassert.isTrue(execSSHAgentStub.calledWith('git', [ 'pull' ], { cwd: git.cloneDirectory }));\n\t},\n\n\tpush() {\n\t\tconst execSSHAgentStub = git.execSSHAgent = stub();\n\n\t\tgit.push('master', 'origin');\n\t\tassert.isTrue(execSSHAgentStub.calledWith('git', [ 'push', 'origin', 'master' ], { silent: false, cwd: git.cloneDirectory }));\n\n\t\tgit.push();\n\t\tassert.isTrue(execSSHAgentStub.calledWith('git', [ 'push' ], { silent: false, cwd: git.cloneDirectory }));\n\t},\n\n\tsetConfig() {\n\t\tgit.setConfig('key', 'value');\n\t\tassert.isTrue(promiseExecStub.calledWith('git config --global key value', { silent: false }));\n\t}\n});\n"]}