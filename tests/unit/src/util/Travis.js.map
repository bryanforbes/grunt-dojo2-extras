{"version":3,"file":"Travis.js","sourceRoot":"","sources":["../../../../../tests/unit/src/util/Travis.ts"],"names":[],"mappings":"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","sourcesContent":["import * as registerSuite from 'intern!object';\nimport * as assert from 'intern/chai!assert';\nimport loadModule, { cleanupModuleMocks } from '../../../_support/loadModule';\nimport { stub, SinonStub } from 'sinon';\nimport Travis, { Repository } from 'src/util/Travis';\n\nlet module: any;\nlet travis: Travis;\nlet repository: Repository;\nlet requestStub: SinonStub & Partial<{ get: SinonStub, post: SinonStub }>;\n\nregisterSuite({\n\tname: 'util/Travis',\n\n\tbefore() {\n\t\trequestStub = stub();\n\t\trequestStub.post = stub();\n\t\trequestStub.get = stub();\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tmodule = loadModule('src/util/Travis', {\n\t\t\t'@dojo/core/request': { default: requestStub }\n\t\t}, false);\n\t},\n\n\tafterEach() {\n\t\trequestStub.reset();\n\t\trequestStub.post.reset();\n\t\trequestStub.get.reset();\n\t},\n\n\t'Travis': {\n\t\tbeforeEach() {\n\t\t\ttravis = new module.default();\n\t\t},\n\n\t\tasync authenticate() {\n\t\t\tconst token = 'token';\n\t\t\tconst accessToken = 'access_token';\n\t\t\tconst post = requestStub.post;\n\n\t\t\tpost.returns(Promise.resolve({ json: () => Promise.resolve({ 'access_token': accessToken }) }));\n\n\t\t\tconst authenticate = await travis.authenticate(token);\n\n\t\t\tassert.strictEqual(post.lastCall.args[1].body, '{\"github_token\":\"token\"}');\n\t\t\tassert.strictEqual(travis.token, accessToken);\n\t\t\tassert.strictEqual(authenticate, accessToken);\n\t\t},\n\n\t\tcreateAuthorization: (() => {\n\t\t\tlet repo: any;\n\t\t\tconst tokenAuth = { token: 'token' };\n\n\t\t\treturn {\n\t\t\t\tbeforeEach() {\n\t\t\t\t\trepo = {\n\t\t\t\t\t\tcreateAuthorization: stub().returns(Promise.resolve(tokenAuth)),\n\t\t\t\t\t\tfindAuthorization: stub().returns(Promise.resolve())\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\tafterEach() {\n\t\t\t\t\trepo.createAuthorization.reset();\n\t\t\t\t\trepo.findAuthorization.reset();\n\t\t\t\t},\n\n\t\t\t\t'existing authorization; eventually throws'() {\n\t\t\t\t\trepo.findAuthorization.returns(Promise.resolve({ id: 1 }));\n\n\t\t\t\t\tconst promise = travis.createAuthorization(repo);\n\n\t\t\t\t\treturn promise.then(assert.fail, (e) => {\n\t\t\t\t\t\tassert.strictEqual(e.message, 'An existing authorization exists. \"#1\"');\n\t\t\t\t\t\tassert.isTrue(repo.createAuthorization.notCalled);\n\t\t\t\t\t\tassert.isTrue(repo.findAuthorization.calledOnce);\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\tasync 'authentication succeeds'() {\n\t\t\t\t\tconst auth = stub(travis, 'authenticate').returns(Promise.resolve());\n\t\t\t\t\tconst deleteAuth = stub(travis, 'deleteAuthorization');\n\n\t\t\t\t\tawait travis.createAuthorization(repo);\n\n\t\t\t\t\tassert.isTrue(repo.createAuthorization.calledOnce);\n\t\t\t\t\tassert.isTrue(auth.calledOnce);\n\t\t\t\t\tassert.isTrue(deleteAuth.notCalled);\n\t\t\t\t\tassert.isTrue(travis.isAuthorized());\n\n\t\t\t\t\tauth.restore();\n\t\t\t\t\tdeleteAuth.restore();\n\t\t\t\t},\n\n\t\t\t\tasync 'authentication fails; eventually throws'() {\n\t\t\t\t\tconst auth = stub(travis, 'authenticate').returns(Promise.reject());\n\t\t\t\t\tconst deleteAuth = stub(travis, 'deleteAuthorization').returns(Promise.resolve());\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait travis.createAuthorization(repo);\n\t\t\t\t\t\tassert.fail('Should have thrown');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// expected to throw\n\t\t\t\t\t}\n\n\t\t\t\t\tassert.isTrue(auth.calledOnce);\n\t\t\t\t\tassert.isTrue(deleteAuth.calledOnce);\n\n\t\t\t\t\tauth.restore();\n\t\t\t\t\tdeleteAuth.restore();\n\t\t\t\t}\n\t\t\t};\n\t\t})(),\n\n\t\tdeleteAuthorization: (() => {\n\t\t\tlet repo: any;\n\n\t\t\treturn {\n\t\t\t\tbeforeEach() {\n\t\t\t\t\trepo = {\n\t\t\t\t\t\tdeleteAuthorization: stub()\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\tafterEach() {\n\t\t\t\t\trepo.deleteAuthorization.reset();\n\t\t\t\t},\n\n\t\t\t\tasync 'not authorized'() {\n\t\t\t\t\tawait travis.deleteAuthorization(repo);\n\n\t\t\t\t\tassert.isTrue(repo.deleteAuthorization.notCalled);\n\t\t\t\t},\n\n\t\t\t\tasync 'authorized'() {\n\t\t\t\t\tconst create = stub(travis, 'createAuthorization', function(this: any) {\n\t\t\t\t\t\tthis.githubAuthorization = { id: 1 };\n\t\t\t\t\t}.bind(travis));\n\n\t\t\t\t\tcreate();\n\t\t\t\t\tawait travis.deleteAuthorization(repo);\n\n\t\t\t\t\tassert.isTrue(repo.deleteAuthorization.calledOnce);\n\t\t\t\t\tassert.isTrue(repo.deleteAuthorization.calledWith(1));\n\n\t\t\t\t\tcreate.restore();\n\t\t\t\t}\n\t\t\t};\n\t\t})(),\n\n\t\tasync fetchRepository() {\n\t\t\trequestStub.get.returns(Promise.resolve({\n\t\t\t\tjson: () => Promise.resolve({\n\t\t\t\t\trepo: 'repo'\n\t\t\t\t})\n\t\t\t}));\n\n\t\t\tconst fetchRepository = await travis.fetchRepository('slug');\n\n\t\t\tassert.isTrue(requestStub.get.calledOnce);\n\t\t\tassert.instanceOf(fetchRepository, module.Repository);\n\t\t},\n\n\t\tisAuthorized: {\n\t\t\t'authorized'() {\n\t\t\t\tconst create = stub(travis, 'createAuthorization', function(this: any) {\n\t\t\t\t\tthis.githubAuthorization = { id: 1 };\n\t\t\t\t}.bind(travis));\n\n\t\t\t\tcreate();\n\n\t\t\t\tassert.isTrue(travis.isAuthorized());\n\n\t\t\t\tcreate.restore();\n\t\t\t},\n\n\t\t\t'not authorized'() {\n\t\t\t\tassert.isFalse(travis.isAuthorized());\n\t\t\t}\n\t\t}\n\t},\n\n\t'Repository': (() => {\n\t\tconst envVarArr = [{\n\t\t\tid: 'id',\n\t\t\tname: 'name',\n\t\t\tvalue: 'value',\n\t\t\t'public': true,\n\t\t\trepository_id: 1\n\t\t}];\n\t\tconst repo = {\n\t\t\tactive: 'active',\n\t\t\tid: 'grunt-dojo2-extras',\n\t\t\tslug: 'extras'\n\t\t};\n\t\tconst token = 'access_token';\n\n\t\treturn {\n\t\t\tbeforeEach() {\n\t\t\t\trepository = new module.Repository(token, repo);\n\t\t\t},\n\n\t\t\t'constructor'() {\n\t\t\t\tassert.isTrue(repository.active);\n\t\t\t\tassert.strictEqual(repository.id, repo.id);\n\t\t\t\tassert.strictEqual(repository.slug, repo.slug);\n\t\t\t\tassert.strictEqual(repository.token, token);\n\t\t\t},\n\n\t\t\tasync listEnvironmentVariables() {\n\t\t\t\trequestStub.get.returns(Promise.resolve({\n\t\t\t\t\tjson: () => Promise.resolve({\n\t\t\t\t\t\t'env_vars': Promise.resolve(envVarArr)\n\t\t\t\t\t})\n\t\t\t\t}));\n\n\t\t\t\tconst envVars = await repository.listEnvironmentVariables();\n\n\t\t\t\tassert.isTrue(requestStub.get.calledOnce);\n\t\t\t\tassert.strictEqual(envVars, envVarArr);\n\t\t\t},\n\n\t\t\tsetEnvironmentVariables: (() => {\n\t\t\t\tlet envVars: any;\n\n\t\t\t\treturn {\n\t\t\t\t\tbeforeEach() {\n\t\t\t\t\t\tenvVars = stub(repository, 'listEnvironmentVariables').returns(Promise.resolve(envVarArr));\n\t\t\t\t\t},\n\n\t\t\t\t\tafterEach() {\n\t\t\t\t\t\tenvVars.restore();\n\t\t\t\t\t},\n\n\t\t\t\t\tasync 'update existing variable'() {\n\t\t\t\t\t\trequestStub.returns(Promise.resolve({ json: () => {}}));\n\n\t\t\t\t\t\tawait repository.setEnvironmentVariables({\n\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\tvalue: 'new value'\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tassert.isTrue(requestStub.calledOnce);\n\t\t\t\t\t},\n\n\t\t\t\t\tasync 'add new environment variable'() {\n\t\t\t\t\t\trequestStub.post.returns(Promise.resolve({ json: () => {}}));\n\n\t\t\t\t\t\tawait repository.setEnvironmentVariables({\n\t\t\t\t\t\t\tname: 'new name',\n\t\t\t\t\t\t\tvalue: 'value'\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tassert.isTrue(requestStub.post.calledOnce);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t})()\n\t\t};\n\t})()\n});\n"]}