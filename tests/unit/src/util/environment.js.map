{"version":3,"file":"environment.js","sourceRoot":"","sources":["../../../../../tests/unit/src/util/environment.ts"],"names":[],"mappings":"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","sourcesContent":["import * as registerSuite from 'intern!object';\nimport * as assert from 'intern/chai!assert';\nimport * as environment from 'src/util/environment';\nimport loadModule, { cleanupModuleMocks } from '../../../_support/loadModule';\nimport { stub, SinonStub } from 'sinon';\n\nconst file = 'test.file';\n\nlet mappedEnvs: { name: string; value: string; }[];\n\nlet module: any;\nlet existsSyncStub: SinonStub;\n\nregisterSuite({\n\tname: 'util/environment',\n\n\tbefore() {\n\t\tconst relevantEnv = [\n\t\t\t'TRAVIS_COMMIT_MESSAGE',\n\t\t\t'TRAVIS_BRANCH',\n\t\t\t'ENCRYPTED_KEY_FILE',\n\t\t\t'TRAVIS_COMMIT',\n\t\t\t'HAS_GIT_CREDENTIALS',\n\t\t\t'HEXO_ROOT',\n\t\t\t'TRAVIS_EVENT_TYPE',\n\t\t\t'KEY_FILE',\n\t\t\t'DEPLOY_DOCS',\n\t\t\t'PUBLISH_TARGET_REPO',\n\t\t\t'TRAVIS_REPO_SLUG'\n\t\t];\n\n\t\tmappedEnvs = relevantEnv.map((name) => ({ name, value: process.env[name] }));\n\n\t\texistsSyncStub = stub();\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tmodule = loadModule('src/util/environment', {\n\t\t\tfs: {\n\t\t\t\texistsSync: existsSyncStub\n\t\t\t}\n\t\t}, false);\n\t},\n\n\tafterEach() {\n\t\tmappedEnvs.forEach((val) => {\n\t\t\tif (val.value) {\n\t\t\t\tprocess.env[val.name] = val.value;\n\t\t\t} else {\n\t\t\t\tdelete process.env[val.name];\n\t\t\t}\n\t\t});\n\n\t\texistsSyncStub.reset();\n\t},\n\n\tcommitMessage() {\n\t\tconst expected = 'update test coverage for `util/environment`';\n\t\tprocess.env.TRAVIS_COMMIT_MESSAGE = expected;\n\t\tassert.equal(environment.commitMessage(), expected);\n\t},\n\n\tcurrentBranch() {\n\t\tconst expected = 'master';\n\t\tprocess.env.TRAVIS_BRANCH = expected;\n\t\tassert.equal(environment.currentBranch(), expected);\n\t},\n\n\tdecryptIvName() {\n\t\tassert.equal(environment.decryptIvName(), 'publish_deploy_iv');\n\t},\n\n\tdecryptKeyName() {\n\t\tassert.equal(environment.decryptKeyName(), 'publish_deploy_key');\n\t},\n\n\tencryptedKeyFile: {\n\t\t'returns ENCRYPTED_KEY_FILE'() {\n\t\t\tconst filename = 'keyfile';\n\t\t\tconst fileWithExt = filename + '.enc';\n\n\t\t\tdelete process.env.KEY_FILE;\n\t\t\tprocess.env.ENCRYPTED_KEY_FILE = fileWithExt;\n\t\t\tassert.equal(environment.encryptedKeyFile(), fileWithExt);\n\t\t},\n\n\t\t'returns value passed'() {\n\t\t\tconst filename = 'keyfile';\n\t\t\tconst fileWithExt = filename + '.enc';\n\n\t\t\tdelete process.env.ENCRYPTED_KEY_FILE;\n\t\t\tassert.equal(environment.encryptedKeyFile(filename), fileWithExt);\n\t\t},\n\n\t\t'returns default encrypted key file'() {\n\t\t\tconst keyFileDefault = 'deploy_key.enc';\n\n\t\t\tdelete process.env.ENCRYPTED_KEY_FILE;\n\t\t\tdelete process.env.KEY_FILE;\n\t\t\tassert.equal(environment.encryptedKeyFile(), keyFileDefault);\n\t\t}\n\t},\n\n\tgitCommit() {\n\t\tconst hash = 'ad64g9cc';\n\t\tprocess.env.TRAVIS_COMMIT = hash;\n\t\tassert.equal(environment.gitCommit(), hash);\n\t},\n\n\thasGitCredentials: {\n\t\t'HAS_GIT_CREDENTIALS set: returns true'() {\n\t\t\tprocess.env.HAS_GIT_CREDENTIALS = 'true';\n\t\t\tassert.isTrue(module.hasGitCredentials());\n\t\t},\n\n\t\t'Running  on Travis; no key file: returns false'() {\n\t\t\texistsSyncStub.returns(false);\n\n\t\t\tdelete process.env.HAS_GIT_CREDENTIALS;\n\t\t\tprocess.env.TRAVIS_BRANCH = 'master';\n\n\t\t\tassert.isFalse(module.hasGitCredentials(file));\n\t\t},\n\n\t\t'Running on Travis; with key file: returns true'() {\n\t\t\texistsSyncStub.returns(true);\n\n\t\t\tdelete process.env.HAS_GIT_CREDENTIALS;\n\t\t\tprocess.env.TRAVIS_BRANCH = 'master';\n\n\t\t\tassert.isTrue(module.hasGitCredentials(file));\n\t\t\tassert.isTrue(existsSyncStub.called);\n\t\t\tassert.strictEqual(existsSyncStub.lastCall.args[0], file);\n\t\t},\n\n\t\t'Running locally: returns true'() {\n\t\t\tdelete process.env.HAS_GIT_CREDENTIALS;\n\t\t\tdelete process.env.TRAVIS_BRANCH;\n\t\t\tassert.isTrue(module.hasGitCredentials());\n\t\t}\n\t},\n\n\thexoRootOverride() {\n\t\tconst hexoRoot = 'hexoRoot';\n\t\tprocess.env.HEXO_ROOT = hexoRoot;\n\t\tassert.equal(environment.hexoRootOverride(), hexoRoot);\n\t},\n\n\thasKeyFile() {\n\t\tassert.isFalse(environment.hasKeyFile(file));\n\t},\n\n\tisCronJob() {\n\t\tprocess.env.TRAVIS_EVENT_TYPE = 'not cron';\n\t\tassert.isFalse(environment.isCronJob());\n\t},\n\n\tisRunningOnTravis() {\n\t\tdelete process.env.TRAVIS_BRANCH;\n\t\tassert.isFalse(environment.isRunningOnTravis());\n\t},\n\n\tkeyFile: {\n\t\t'returns KEY_FILE'() {\n\t\t\tconst fileName = 'key_file';\n\t\t\tprocess.env.KEY_FILE = fileName;\n\t\t\tassert.equal(environment.keyFile(), fileName);\n\t\t},\n\n\t\t'returns value passed'() {\n\t\t\tdelete process.env.KEY_FILE;\n\t\t\tassert.equal(environment.keyFile(), 'deploy_key');\n\t\t}\n\t},\n\n\tpublishMode: {\n\t\t'returns DEPLOY_DOCS'() {\n\t\t\tconst commit = 'commit';\n\t\t\tprocess.env.DEPLOY_DOCS = commit;\n\t\t\tassert.equal(environment.publishMode(), commit);\n\t\t},\n\n\t\t'returns `skip` if running on Travis'() {\n\t\t\tdelete process.env.DEPLOY_DOCS;\n\t\t\tprocess.env.TRAVIS_BRANCH = 'master';\n\t\t\tassert.equal(environment.publishMode(), 'skip');\n\t\t}\n\t},\n\n\trepositorySource: {\n\t\t'returns PUBLISH_TARGET_REPO if available'() {\n\t\t\tconst target = 'target repo';\n\t\t\tprocess.env.PUBLISH_TARGET_REPO = target;\n\t\t\tassert.equal(environment.repositorySource(), target);\n\t\t},\n\n\t\t'returns TRAVIS_REPO_SLUG if PUBLISH_TARGET_REPO unavailable'() {\n\t\t\tdelete process.env.PUBLISH_TARGET_REPO;\n\t\t\tconst slug = 'target_repo';\n\t\t\tprocess.env.TRAVIS_REPO_SLUG = slug;\n\t\t\tassert.equal(environment.repositorySource(), slug);\n\t\t},\n\n\t\t'returns empty string if TRAVIS_REPO_SLUG and PUBLISH_TARGET_REPO unavailable'() {\n\t\t\tdelete process.env.TRAVIS_REPO_SLUG;\n\t\t\tassert.equal(environment.repositorySource(), '');\n\t\t}\n\t}\n});\n"]}