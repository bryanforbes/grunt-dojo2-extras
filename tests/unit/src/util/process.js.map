{"version":3,"file":"process.js","sourceRoot":"","sources":["../../../../../tests/unit/src/util/process.ts"],"names":[],"mappings":"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","sourcesContent":["import * as registerSuite from 'intern!object';\nimport * as assert from 'intern/chai!assert';\nimport { stub, SinonStub } from 'sinon';\nimport loadModule, { cleanupModuleMocks } from '../../../_support/loadModule';\nimport * as processUtil from 'src/util/process';\nimport { LogStream } from 'src/log';\nimport { throwWithError } from '../../../_support/util';\n\nlet module: any;\nlet execStub: SinonStub;\nlet spawnStub: SinonStub;\n\nregisterSuite({\n\tname: 'util/process',\n\n\tbefore() {\n\t\texecStub = stub();\n\t\tspawnStub = stub();\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tmodule = loadModule('src/util/process', {\n\t\t\tchild_process: {\n\t\t\t\texec: execStub,\n\t\t\t\tspawn: spawnStub\n\t\t\t}\n\t\t});\n\t},\n\n\tafterEach() {\n\t\texecStub.reset();\n\t\tspawnStub.reset();\n\t},\n\n\tpromisify: (() => {\n\t\tlet proc: any;\n\n\t\treturn {\n\t\t\tbeforeEach() {\n\t\t\t\tproc = {\n\t\t\t\t\tstdout: { pipe: stub() },\n\t\t\t\t\tstderr: { pipe: stub() },\n\t\t\t\t\ton: stub()\n\t\t\t\t};\n\n\t\t\t\tstub(processUtil, 'exec').returns(proc);\n\t\t\t},\n\n\t\t\tafterEach() {\n\t\t\t\t(<SinonStub> processUtil.exec).restore();\n\t\t\t},\n\n\t\t\tasync 'eventually resolves the returned promise'() {\n\t\t\t\tconst promise = processUtil.promisify(processUtil.exec('test'));\n\n\t\t\t\tproc.on.lastCall.args[1](0);\n\t\t\t\tassert.equal(proc, await promise);\n\n\t\t\t\treturn promise;\n\t\t\t},\n\n\t\t\t'child process exits with code other than 0; eventually rejects the returned promise'() {\n\t\t\t\tlet promise;\n\n\t\t\t\tpromise = processUtil.promisify(processUtil.exec('test'));\n\n\t\t\t\tproc.on.lastCall.args[1](1);\n\t\t\t\treturn promise.then(\n\t\t\t\t\tthrowWithError('promise should reject'),\n\t\t\t\t\t(e) => {\n\t\t\t\t\t\tassert.strictEqual(e.message, 'Process exited with a code of 1');\n\t\t\t\t\t\tassert.strictEqual(process.exitCode, 1);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t})(),\n\n\texec: {\n\t\t'execChild is called, options not applied; execChild\\'s value is returned'() {\n\t\t\tlet value = 'ls';\n\n\t\t\texecStub.returns(value);\n\n\t\t\tlet proc = module.exec(value, { silent: true });\n\n\t\t\tassert.isTrue(execStub.calledOnce);\n\t\t\tassert.strictEqual(proc, value);\n\t\t},\n\n\t\t'options applied after execChild is called'() {\n\t\t\t// required for the internal named function `applyOptions`\n\t\t\texecStub.returns({\n\t\t\t\tstdout: { pipe: stub() },\n\t\t\t\tstderr: { pipe: stub() }\n\t\t\t});\n\n\t\t\tconst proc = module.exec('ls', { silent: false });\n\n\t\t\tassert.isTrue(proc.stdout.pipe.calledOnce);\n\t\t\tassert.isTrue(proc.stderr.pipe.calledOnce);\n\t\t\tassert.instanceOf(proc.stdout.pipe.lastCall.args[0], LogStream);\n\t\t\tassert.instanceOf(proc.stderr.pipe.lastCall.args[0], LogStream);\n\t\t}\n\t},\n\n\tpromiseExec: (() => {\n\t\treturn {\n\t\t\t'options not applied'() {\n\t\t\t\tconst promise = testExec();\n\n\t\t\t\tassert.equal(execStub.lastCall.args[1].silent, false);\n\n\t\t\t\treturn promise;\n\t\t\t},\n\t\t\t'options applied, options.silent = true'() {\n\t\t\t\tconst promise = testExec({ silent: true });\n\n\t\t\t\tassert.equal(execStub.lastCall.args[1].silent, true);\n\n\t\t\t\treturn promise;\n\t\t\t},\n\t\t\t'options applied, options.silent undefined'() {\n\t\t\t\tconst promise = testExec({});\n\n\t\t\t\tassert.equal(execStub.lastCall.args[1].silent, false);\n\n\t\t\t\treturn promise;\n\t\t\t}\n\t\t};\n\n\t\tasync function testExec(opts?: any) {\n\t\t\tconst proc = {\n\t\t\t\tstdout: { pipe: stub() },\n\t\t\t\tstderr: { pipe: stub() },\n\t\t\t\ton: stub()\n\t\t\t};\n\n\t\t\texecStub.returns(proc);\n\n\t\t\tconst promise = module.promiseExec('test', opts);\n\n\t\t\tassert.isTrue(proc.on.called);\n\t\t\tassert.instanceOf(promise, Promise);\n\t\t\tassert.isTrue(proc.on.calledWith('close'));\n\n\t\t\tproc.on.lastCall.args[1](0);\n\t\t\tassert.equal(proc, await promise);\n\n\t\t\treturn promise;\n\t\t}\n\t})(),\n\n\tspawn: {\n\t\t'spawnChild is called, the return value of which is returned; options not applied'() {\n\t\t\tlet value = 'ls';\n\n\t\t\tspawnStub.returns(value);\n\n\t\t\tlet proc = module.spawn(value, [ '-l' ], { silent: true });\n\n\t\t\tassert.isTrue(spawnStub.calledOnce);\n\t\t\tassert.strictEqual(proc, value);\n\t\t},\n\n\t\t'options applied after spawnChild is called'() {\n\t\t\t// required for the internal named function `applyOptions`\n\t\t\tspawnStub.returns({\n\t\t\t\tstdout: { pipe: stub() },\n\t\t\t\tstderr: { pipe: stub() }\n\t\t\t});\n\n\t\t\tconst proc = module.spawn('ls', [ '-l' ], { silent: false });\n\n\t\t\tassert.isTrue(proc.stdout.pipe.calledOnce);\n\t\t\tassert.isTrue(proc.stderr.pipe.calledOnce);\n\t\t\tassert.instanceOf(proc.stdout.pipe.lastCall.args[0], LogStream);\n\t\t\tassert.instanceOf(proc.stderr.pipe.lastCall.args[0], LogStream);\n\t\t}\n\t},\n\n\tpromiseSpawn: (() => {\n\t\treturn {\n\t\t\t'options not applied'() {\n\t\t\t\tconst promise = testSpawn();\n\n\t\t\t\tassert.equal(spawnStub.lastCall.args[2].silent, false);\n\n\t\t\t\treturn promise;\n\t\t\t},\n\t\t\t'options applied, options.silent = true'() {\n\t\t\t\tconst promise = testSpawn({ silent: true });\n\n\t\t\t\tassert.equal(spawnStub.lastCall.args[2].silent, true);\n\n\t\t\t\treturn promise;\n\t\t\t},\n\t\t\t'options applied, options.silent undefined'() {\n\t\t\t\tconst promise = testSpawn({});\n\n\t\t\t\tassert.equal(spawnStub.lastCall.args[2].silent, false);\n\n\t\t\t\treturn promise;\n\t\t\t}\n\t\t};\n\n\t\tasync function testSpawn(opts?: any) {\n\t\t\tconst proc = {\n\t\t\t\tstdout: { pipe: stub() },\n\t\t\t\tstderr: { pipe: stub() },\n\t\t\t\ton: stub()\n\t\t\t};\n\n\t\t\tspawnStub.returns(proc);\n\n\t\t\tconst promise = module.promiseSpawn('test', [ 'arg' ], opts);\n\n\t\t\tassert.isTrue(proc.on.called);\n\t\t\tassert.instanceOf(promise, Promise);\n\t\t\tassert.isTrue(proc.on.calledWith('close'));\n\n\t\t\tproc.on.lastCall.args[1](0);\n\t\t\tassert.equal(proc, await promise);\n\n\t\t\treturn promise;\n\t\t}\n\t})()\n});\n"]}