{"version":3,"file":"getReleases.js","sourceRoot":"","sources":["../../../../../tests/unit/src/commands/getReleases.ts"],"names":[],"mappings":"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","sourcesContent":["import * as registerSuite from 'intern!object';\nimport * as assert from 'intern/chai!assert';\nimport loadModule, { cleanupModuleMocks } from '../../../_support/loadModule';\nimport { stub, SinonStub } from 'sinon';\nimport { getHtmlApiPath, getJsonApiPath } from '../../../../src/commands/getReleases';\nimport { Release } from '../../../../src/util/GitHub';\n\nlet module: any;\nlet existsSyncStub: SinonStub;\n\nfunction assertExistsFilter(builder: any, expected: boolean, filename: string) {\n\tconst filter = builder('project', 'directory');\n\texistsSyncStub.returns(expected);\n\tassert.strictEqual(filter({ name: 'version' }), !expected);\n\tassert.isTrue(existsSyncStub.called, 'existSync was not called');\n\tassert.strictEqual(existsSyncStub.firstCall.args[0], filename);\n}\n\nregisterSuite({\n\tname: 'getReleases',\n\n\tbefore() {\n\t\texistsSyncStub = stub();\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tmodule = loadModule('src/commands/getReleases', {\n\t\t\tfs: {\n\t\t\t\texistsSync: existsSyncStub\n\t\t\t}\n\t\t}, false);\n\t},\n\n\tafterEach() {\n\t\texistsSyncStub.reset();\n\t},\n\n\tgetHtmlApiPath() {\n\t\tassert.strictEqual(getHtmlApiPath('base', 'project', 'version'), 'base/project/version');\n\t},\n\n\tgetJsonApiPath() {\n\t\tassert.strictEqual(getJsonApiPath('base', 'project', 'version'), 'base/project-version.json');\n\t},\n\n\tfilters: {\n\t\tcreateHtmlApiMissingFilter: {\n\t\t\t'exists; returns false'() {\n\t\t\t\tconst { createHtmlApiMissingFilter } = module;\n\t\t\t\tassertExistsFilter(createHtmlApiMissingFilter, true, 'directory/project/version');\n\t\t\t},\n\n\t\t\t'does not exist; returns true'() {\n\t\t\t\tconst { createHtmlApiMissingFilter } = module;\n\t\t\t\tassertExistsFilter(createHtmlApiMissingFilter, false, 'directory/project/version');\n\t\t\t}\n\t\t},\n\n\t\tcreateJsonApiMissingFilter: {\n\t\t\t'exists; returns false'() {\n\t\t\t\tconst { createJsonApiMissingFilter } = module;\n\t\t\t\tassertExistsFilter(createJsonApiMissingFilter, true, 'directory/project-version.json');\n\t\t\t},\n\n\t\t\t'does not exist; returns true'() {\n\t\t\t\tconst { createJsonApiMissingFilter } = module;\n\t\t\t\tassertExistsFilter(createJsonApiMissingFilter, false, 'directory/project-version.json');\n\t\t\t}\n\t\t},\n\n\t\tlatestFilter() {\n\t\t\tconst { latestFilter } = module;\n\t\t\tconst list = [ 'one', 'two', 'three' ];\n\t\t\tassert.deepEqual(list.filter(latestFilter), [ 'three' ]);\n\t\t},\n\n\t\tcreateVersionFilter: {\n\t\t\t'satisfies semver; returns true'() {\n\t\t\t\tconst { createVersionFilter } = module;\n\t\t\t\tconst filter = createVersionFilter('>= 2.0.0');\n\t\t\t\tassert.isTrue(filter({ name: '2.0.0' }));\n\t\t\t},\n\n\t\t\t'does not satisfy semver; returns false'() {\n\t\t\t\tconst { createVersionFilter } = module;\n\t\t\t\tconst filter = createVersionFilter('< 2.0.0');\n\t\t\t\tassert.isFalse(filter({ name: '2.0.0' }));\n\t\t\t}\n\t\t}\n\t},\n\n\tgetReleases: (() => {\n\t\tlet getReleases: any;\n\t\tlet mockGitHub: any;\n\n\t\treturn {\n\t\t\tbefore() {\n\t\t\t\tgetReleases = module.default;\n\t\t\t\tmockGitHub = {\n\t\t\t\t\tfetchReleases() {\n\t\t\t\t\t\treturn Promise.resolve([\n\t\t\t\t\t\t\t{ name: 'one' },\n\t\t\t\t\t\t\t{ name: '2.0.0' },\n\t\t\t\t\t\t\t{ name: '1.6.5' },\n\t\t\t\t\t\t\t{ name: '3.0.0-beta' }\n\t\t\t\t\t\t]);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tasync 'removes version not compatible with semver'() {\n\t\t\t\tconst releases = await getReleases(mockGitHub);\n\t\t\t\tconst expected = [\n\t\t\t\t\t{ name: '1.6.5' },\n\t\t\t\t\t{ name: '2.0.0' },\n\t\t\t\t\t{ name: '3.0.0-beta' }\n\t\t\t\t];\n\t\t\t\tassert.deepEqual(releases, expected);\n\t\t\t},\n\n\t\t\tasync 'applies filters'() {\n\t\t\t\tconst filter = (release: Release) => {\n\t\t\t\t\treturn release.name === '2.0.0';\n\t\t\t\t};\n\t\t\t\tconst releases = await getReleases(mockGitHub, [ filter ]);\n\t\t\t\tconst expected = [\n\t\t\t\t\t{ name: '2.0.0' }\n\t\t\t\t];\n\t\t\t\tassert.deepEqual(releases, expected);\n\t\t\t}\n\t\t};\n\t})()\n});\n"]}