{"version":3,"file":"publish.js","sourceRoot":"","sources":["../../../../../tests/unit/src/commands/publish.ts"],"names":[],"mappings":"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","sourcesContent":["import * as registerSuite from 'intern!object';\nimport * as assert from 'intern/chai!assert';\nimport loadModule, { cleanupModuleMocks } from '../../../_support/loadModule';\nimport { stub, SinonStub } from 'sinon';\n\nlet publish: any;\nlet gitCommitStub: SinonStub;\n\nregisterSuite({\n\tname: 'commands/publish',\n\n\tbefore() {\n\t\tgitCommitStub = stub();\n\t},\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tpublish = loadModule('src/commands/publish', {\n\t\t\t'../util/environment': {\n\t\t\t\tgitCommit: gitCommitStub\n\t\t\t}\n\t\t});\n\t},\n\n\tafterEach() {\n\t\tgitCommitStub.reset();\n\t},\n\n\t'publish': {\n\t\tasync 'publishMode is a function that returns \"skip\"'() {\n\t\t\tconst opts = {\n\t\t\t\tbranch: 'master',\n\t\t\t\tpublishMode: stub().returns('skip'),\n\t\t\t\trepo: {\n\t\t\t\t\tareFilesChanged: stub()\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tawait publish(opts);\n\n\t\t\tassert.isTrue(opts.publishMode.calledOnce);\n\t\t\tassert.isTrue(opts.repo.areFilesChanged.notCalled);\n\t\t},\n\n\t\t'publishMode is a string': (() => {\n\t\t\tlet opts: any;\n\n\t\t\treturn {\n\t\t\t\tbeforeEach() {\n\t\t\t\t\topts = {\n\t\t\t\t\t\tbranch: 'master',\n\t\t\t\t\t\tpublishMode: 'commit',\n\t\t\t\t\t\trepo: {\n\t\t\t\t\t\t\tadd: stub().returns(Promise.resolve()),\n\t\t\t\t\t\t\tareFilesChanged: stub().returns(Promise.resolve(true)),\n\t\t\t\t\t\t\tcommit: stub().returns(Promise.resolve()),\n\t\t\t\t\t\t\tensureConfig: stub().returns(Promise.resolve()),\n\t\t\t\t\t\t\tgetConfig: stub().returns(Promise.resolve('username')),\n\t\t\t\t\t\t\tpush: stub().returns(Promise.resolve())\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\tasync 'repo has no changes'() {\n\t\t\t\t\tconst areFilesChanged = opts.repo.areFilesChanged;\n\n\t\t\t\t\tareFilesChanged.returns(Promise.resolve(false));\n\n\t\t\t\t\tawait publish(opts);\n\n\t\t\t\t\tassert.isTrue(areFilesChanged.calledOnce);\n\t\t\t\t\tassert.isTrue(opts.repo.ensureConfig.notCalled);\n\t\t\t\t},\n\n\t\t\t\tasync 'publishMode is \"commit\"; gitCommit returns a value; repo is published'() {\n\t\t\t\t\tgitCommitStub.returns('a35de344');\n\n\t\t\t\t\tawait publish(opts);\n\n\t\t\t\t\tassert.isTrue(opts.repo.ensureConfig.calledOnce);\n\t\t\t\t\tassert.isTrue(opts.repo.add.calledOnce);\n\t\t\t\t\tassert.isTrue(opts.repo.commit.calledOnce);\n\t\t\t\t\tassert.isTrue(opts.repo.commit.calledWith('Published by username from commit a35de344'));\n\t\t\t\t\tassert.isTrue(opts.repo.push.notCalled);\n\t\t\t\t},\n\n\t\t\t\tasync 'publishMode is \"commit\"; gitCommit returns falsy'() {\n\t\t\t\t\tgitCommitStub.returns(undefined);\n\n\t\t\t\t\tawait publish(opts);\n\n\t\t\t\t\tassert.isTrue(opts.repo.commit.calledWith('Published by username'));\n\t\t\t\t},\n\n\t\t\t\tasync 'publishMode is \"publish\"'() {\n\t\t\t\t\topts.publishMode = 'publish';\n\n\t\t\t\t\tawait publish(opts);\n\n\t\t\t\t\tassert.isTrue(opts.repo.push.calledOnce);\n\t\t\t\t}\n\t\t\t};\n\t\t})()\n\t}\n});\n"]}