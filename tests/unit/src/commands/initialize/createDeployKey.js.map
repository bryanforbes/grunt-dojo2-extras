{"version":3,"file":"createDeployKey.js","sourceRoot":"","sources":["../../../../../../tests/unit/src/commands/initialize/createDeployKey.ts"],"names":[],"mappings":"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","sourcesContent":["import * as registerSuite from 'intern!object';\nimport * as assert from 'intern/chai!assert';\nimport loadModule, { cleanupModuleMocks } from '../../../../_support/loadModule';\nimport { stub } from 'sinon';\n\nlet createDeployKey: any;\n\nconst encryptedStub = {\n\tpipe: stub(),\n\ton: stub()\n};\nconst keyFileStub = stub();\nconst encryptedKeyFileStub = stub();\nconst existsSyncStub = stub();\nconst createReadStreamStub = stub();\nconst createWriteStreamStub = stub();\nconst createKeyStub = stub();\nconst encryptDataStub = stub();\nconst decryptDataStub = stub();\nconst equalStub = stub();\n\nregisterSuite({\n\tname: 'commands/initialize/createDeployKey',\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tencryptedStub.pipe.returns(encryptedStub);\n\t\tencryptedStub.on.returns(encryptedStub).yields();\n\n\t\tcreateDeployKey = loadModule('src/commands/initialize/createDeployKey', {\n\t\t\t'../../util/environment': {\n\t\t\t\tkeyFile: keyFileStub.returns('keyFileStub'),\n\t\t\t\tencryptedKeyFile: encryptedKeyFileStub.returns('encryptedKeyFileStub')\n\t\t\t},\n\t\t\t'fs': {\n\t\t\t\texistsSync: existsSyncStub,\n\t\t\t\tcreateReadStream: createReadStreamStub,\n\t\t\t\tcreateWriteStream: createWriteStreamStub\n\t\t\t},\n\t\t\t'../../util/crypto': {\n\t\t\t\tcreateKey: createKeyStub.returns(Promise.resolve({\n\t\t\t\t\tprivateKey: 'privateKey',\n\t\t\t\t\tpublicKey: 'publicKey'\n\t\t\t\t})),\n\t\t\t\tencryptData: encryptDataStub.returns({\n\t\t\t\t\tkey: 'encrypt data key',\n\t\t\t\t\tiv: 'encrypt data iv',\n\t\t\t\t\tencrypted: encryptedStub\n\t\t\t\t}),\n\t\t\t\tdecryptData: decryptDataStub\n\t\t\t},\n\t\t\t'../../util/streams': {\n\t\t\t\tequal: equalStub.returns(Promise.resolve())\n\t\t\t}\n\t\t});\n\t},\n\n\tafterEach() {\n\t\tkeyFileStub.reset();\n\t\tencryptedKeyFileStub.reset();\n\t\texistsSyncStub.reset();\n\t\tcreateReadStreamStub.reset();\n\t\tcreateWriteStreamStub.reset();\n\t\tcreateKeyStub.reset();\n\t\tencryptDataStub.reset();\n\t\tdecryptDataStub.reset();\n\t\tequalStub.reset();\n\t},\n\n\t'createDeployKey': (() => {\n\t\treturn {\n\t\t\tasync 'with explicit arguments passed in'() {\n\t\t\t\tawait assertDeployKey('deploykey.file', 'deploykey.enc');\n\t\t\t},\n\n\t\t\tasync 'with default options'() {\n\t\t\t\tawait assertDeployKey();\n\n\t\t\t\tassert.isTrue(keyFileStub.calledOnce);\n\t\t\t\tassert.isTrue(encryptedKeyFileStub.calledOnce);\n\t\t\t},\n\n\t\t\t'Deploy key already exists'() {\n\t\t\t\texistsSyncStub.returns(true);\n\n\t\t\t\tconst promise = createDeployKey('deploykey.file', 'deploykey.enc');\n\t\t\t\treturn promise.then(assert.fail, (err: any) => {\n\t\t\t\t\tassert.strictEqual(err.message, 'Deploy key already exists');\n\t\t\t\t\tassert.isTrue(existsSyncStub.calledOnce);\n\t\t\t\t});\n\n\t\t\t}\n\t\t};\n\n\t\tasync function assertDeployKey(deployKeyFile?: any, encryptedKeyFile?: any) {\n\t\t\tconst key = await createDeployKey(deployKeyFile, encryptedKeyFile);\n\n\t\t\tassert.isTrue(createKeyStub.calledOnce);\n\t\t\tassert.isTrue(encryptDataStub.calledOnce);\n\t\t\tassert.isTrue(createReadStreamStub.calledThrice);\n\t\t\tassert.isTrue(createWriteStreamStub.calledOnce);\n\t\t\tassert.isTrue(equalStub.calledOnce);\n\n\t\t\treturn key;\n\t\t}\n\t})()\n});\n"]}