{"version":3,"file":"initDeployment.js","sourceRoot":"","sources":["../../../../../../tests/unit/src/commands/initialize/initDeployment.ts"],"names":[],"mappings":"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","sourcesContent":["import * as registerSuite from 'intern!object';\nimport * as assert from 'intern/chai!assert';\nimport loadModule, { cleanupModuleMocks } from '../../../../_support/loadModule';\nimport { spy, stub, SinonStub } from 'sinon';\nimport { throwWithError } from '../../../../_support/util';\n\nlet initDeployment: any;\n\nconst githubAuthStub = stub();\nconst keyFileStub = stub();\nconst encryptedKeyFileStub = stub();\nconst createDeployKeyStub = stub();\nconst findStub = stub();\nconst existsSyncStub = stub();\nconst readFileSyncStub = stub();\nconst isAuthorizedStub = stub();\nconst travisCreateAuthorizationStub = stub();\nconst travisDeleteAuthorizationStub = stub();\nconst fetchRepositoryStub = stub();\nconst listEnvironmentVariablesStub = stub();\nconst setEnvironmentVariablesStub = stub();\nconst createKeyStub = stub();\nconst deleteKeyStub = stub();\n\nconst Travis = class {\n\tconstructor() {}\n\tisAuthorized: SinonStub = isAuthorizedStub;\n\tcreateAuthorization: SinonStub = travisCreateAuthorizationStub;\n\tdeleteAuthorization: SinonStub = travisDeleteAuthorizationStub;\n\tfetchRepository: SinonStub = fetchRepositoryStub;\n};\n\nconst GitHub = class {\n\tconstructor() {}\n\ttoString() {\n\t\treturn 'repo';\n\t}\n\tcreateKey: SinonStub = createKeyStub;\n\tdeleteKey: SinonStub = deleteKeyStub;\n};\n\nconst TravisSpy = spy(Travis);\n\nregisterSuite({\n\tname: 'commands/initialize/initDeployment',\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tisAuthorizedStub.returns(true);\n\t\tkeyFileStub.returns('keyFile');\n\t\tencryptedKeyFileStub.returns('encryptedKeyFile');\n\t\texistsSyncStub.returns(true);\n\t\tfetchRepositoryStub.resolves({\n\t\t\tlistEnvironmentVariables: listEnvironmentVariablesStub,\n\t\t\tsetEnvironmentVariables: setEnvironmentVariablesStub\n\t\t});\n\t\tlistEnvironmentVariablesStub.resolves([\n\t\t\t{ name: 'decryptKey', value: 'decryptKey', isPublic: false },\n\t\t\t{ name: 'decryptIv', value: 'decryptIv', isPublic: false }\n\t\t]);\n\t\tcreateDeployKeyStub.returns({\n\t\t\tpublicKey: 'publicKey',\n\t\t\tprivateKey: 'privateKey',\n\t\t\tencryptedKey: {\n\t\t\t\tkey: 'encryptedKey',\n\t\t\t\tiv: 'encryptedIv'\n\t\t\t}\n\t\t});\n\n\t\tinitDeployment = loadModule('src/commands/initialize/initDeployment', {\n\t\t\t'../../util/Travis': { default: TravisSpy },\n\t\t\t'../../util/environment': {\n\t\t\t\tdecryptKeyName: 'decryptKey',\n\t\t\t\tdecryptIvName: 'decryptIv',\n\t\t\t\tgithubAuth: githubAuthStub,\n\t\t\t\tkeyFile: keyFileStub,\n\t\t\t\tencryptedKeyFile: encryptedKeyFileStub\n\t\t\t},\n\t\t\t'./createDeployKey': { default: createDeployKeyStub },\n\t\t\t'@dojo/shim/array': {\n\t\t\t\tfind: findStub\n\t\t\t},\n\t\t\t'fs': {\n\t\t\t\texistsSync: existsSyncStub,\n\t\t\t\treadFileSync: readFileSyncStub\n\t\t\t}\n\t\t});\n\t},\n\n\tafterEach() {\n\t\tTravisSpy.reset();\n\t\tgithubAuthStub.reset();\n\t\tkeyFileStub.reset();\n\t\tencryptedKeyFileStub.reset();\n\t\tcreateDeployKeyStub.reset();\n\t\tfindStub.reset();\n\t\texistsSyncStub.reset();\n\t\treadFileSyncStub.reset();\n\t\tisAuthorizedStub.reset();\n\t\ttravisCreateAuthorizationStub.reset();\n\t\ttravisDeleteAuthorizationStub.reset();\n\t\tfetchRepositoryStub.reset();\n\t\tlistEnvironmentVariablesStub.reset();\n\t\tsetEnvironmentVariablesStub.reset();\n\t\tcreateKeyStub.reset();\n\t\tdeleteKeyStub.reset();\n\t},\n\n\t'initDeployment': (() => {\n\t\tasync function assertInitDeployment(travis?: any, options?: any) {\n\t\t\tconst repo = new GitHub();\n\t\t\tawait initDeployment(repo, travis, options);\n\n\t\t\tassert.isTrue(isAuthorizedStub.calledOnce);\n\t\t\tassert.isTrue(fetchRepositoryStub.calledOnce);\n\t\t\tassert.isTrue(travisDeleteAuthorizationStub.calledOnce);\n\t\t}\n\n\t\treturn {\n\t\t\tasync 'explicit Travis instance and options'() {\n\t\t\t\tconst travis = new Travis();\n\n\t\t\t\tawait assertInitDeployment(travis, {\n\t\t\t\t\tdeployKeyFile: 'deploy-key.file',\n\t\t\t\t\tencryptedKeyFile: 'deploy-key.enc'\n\t\t\t\t});\n\t\t\t},\n\n\t\t\tasync 'default instance and options; Travis is not authorized, should not create deploy key'() {\n\t\t\t\tisAuthorizedStub.returns(false);\n\t\t\t\ttravisCreateAuthorizationStub.resolves(true);\n\n\t\t\t\tawait assertInitDeployment();\n\n\t\t\t\t// default options\n\t\t\t\tassert.isTrue(TravisSpy.calledOnce);\n\t\t\t\tassert.isTrue(keyFileStub.calledOnce);\n\t\t\t\tassert.isTrue(encryptedKeyFileStub.calledOnce);\n\n\t\t\t\t// because travis is not authorized, we should create an authorization\n\t\t\t\tassert.isTrue(travisCreateAuthorizationStub.calledOnce);\n\n\t\t\t\t// we should get the Travis environment variables\n\t\t\t\tassert.isTrue(listEnvironmentVariablesStub.calledOnce);\n\n\t\t\t\t// existsSync is called within the private function `shouldCreateDeployKey`\n\t\t\t\tassert.isTrue(existsSyncStub.calledOnce);\n\n\t\t\t\t// we shouldn't be creating a deploy key, so these stubs should not be called\n\t\t\t\tassert.isTrue(createDeployKeyStub.notCalled);\n\t\t\t\tassert.isTrue(createKeyStub.notCalled);\n\t\t\t\tassert.isTrue(setEnvironmentVariablesStub.notCalled);\n\n\t\t\t\t// find is called within the private function `displayDeployOptionSummary`\n\t\t\t\tassert.isTrue(findStub.calledOnce);\n\t\t\t},\n\n\t\t\tasync 'should create deploy key'() {\n\t\t\t\tlistEnvironmentVariablesStub.resolves([]);\n\t\t\t\tisAuthorizedStub.returns(false);\n\t\t\t\texistsSyncStub.returns(false);\n\n\t\t\t\tawait assertInitDeployment();\n\n\t\t\t\tassert.isTrue(createDeployKeyStub.calledOnce);\n\t\t\t\tassert.isTrue(readFileSyncStub.calledOnce);\n\t\t\t\tassert.isTrue(createKeyStub.calledOnce);\n\t\t\t\tassert.isTrue(setEnvironmentVariablesStub.calledOnce);\n\t\t\t},\n\n\t\t\t'has no ssh key so will not call `deleteKey`; eventually throws'() {\n\t\t\t\tconst message = 'error: cannot create key';\n\n\t\t\t\tcreateKeyStub.rejects({ message });\n\t\t\t\texistsSyncStub.returns(false);\n\t\t\t\tlistEnvironmentVariablesStub.resolves([]);\n\n\t\t\t\treturn assertInitDeployment().then(\n\t\t\t\t\tthrowWithError('Should throw when no ssh key can be created'),\n\t\t\t\t\t(e) => {\n\t\t\t\t\t\tassert.isTrue(deleteKeyStub.notCalled);\n\t\t\t\t\t\tassert.strictEqual(message, e.message);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t},\n\n\t\t\t'has deploy key environment variable; calls `deleteKey`; eventually throws'() {\n\t\t\t\tconst message = 'error: cannot set env vars';\n\n\t\t\t\tsetEnvironmentVariablesStub.rejects({ message });\n\t\t\t\texistsSyncStub.returns(false);\n\t\t\t\tlistEnvironmentVariablesStub.resolves([]);\n\t\t\t\t// Won't delete key unless keyResponse has a value\n\t\t\t\tcreateKeyStub.resolves(true);\n\n\t\t\t\treturn assertInitDeployment().then(\n\t\t\t\t\tthrowWithError('Should throw when environment variables cannot be set'),\n\t\t\t\t\t(e) => {\n\t\t\t\t\t\tassert.isTrue(deleteKeyStub.calledOnce);\n\t\t\t\t\t\tassert.strictEqual(message, e.message);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t})()\n});\n"]}