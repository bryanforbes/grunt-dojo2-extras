{"version":3,"file":"decryptDeployKey.js","sourceRoot":"","sources":["../../../../../tests/unit/src/commands/decryptDeployKey.ts"],"names":[],"mappings":"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","sourcesContent":["import * as registerSuite from 'intern!object';\nimport * as assert from 'intern/chai!assert';\nimport loadModule, { cleanupModuleMocks } from '../../../_support/loadModule';\nimport { stub } from 'sinon';\nimport { throwWithError } from '../../../_support/util';\n\nlet decryptDeployKey: any;\n\nconst decryptDataObj = {\n\ton: stub(),\n\tpipe: stub()\n};\nconst decryptDataStub = stub();\nconst encryptedKeyFileStub = stub();\nconst keyFileStub = stub();\nconst existsSyncStub = stub();\nconst createWriteStreamStub = stub();\nconst createReadStreamStub = stub();\n\nregisterSuite({\n\tname: 'commands/decryptDeployKey',\n\n\tafter() {\n\t\tcleanupModuleMocks();\n\t},\n\n\tbeforeEach() {\n\t\tdecryptDataObj.on.returns(decryptDataObj);\n\t\tdecryptDataObj.pipe.returns(decryptDataObj);\n\n\t\tdecryptDeployKey = loadModule('src/commands/decryptDeployKey', {\n\t\t\t'../util/crypto': {\n\t\t\t\tdecryptData: decryptDataStub.returns(decryptDataObj)\n\t\t\t},\n\t\t\t'../util/environment': {\n\t\t\t\tdecryptKeyName: 'decryptKeyName',\n\t\t\t\tdecryptIvName: 'decryptIvName',\n\t\t\t\tencryptedKeyFile: encryptedKeyFileStub.returns('encryptedKeyFile'),\n\t\t\t\tkeyFile: keyFileStub.returns('keyFile')\n\t\t\t},\n\t\t\t'fs': {\n\t\t\t\texistsSync: existsSyncStub,\n\t\t\t\tcreateWriteStream: createWriteStreamStub.returns('writeStream'),\n\t\t\t\tcreateReadStream: createReadStreamStub.returns('readStream')\n\t\t\t}\n\t\t});\n\t},\n\n\tafterEach() {\n\t\tdecryptDataStub.reset();\n\t\tencryptedKeyFileStub.reset();\n\t\tkeyFileStub.reset();\n\t\texistsSyncStub.reset();\n\t\tcreateWriteStreamStub.reset();\n\t\tcreateReadStreamStub.reset();\n\t\tdecryptDataObj.on.reset();\n\t\tdecryptDataObj.pipe.reset();\n\t},\n\n\t'decryptDeployKey': (() => {\n\t\tfunction ensureDecryptionResolves() {\n\t\t\texistsSyncStub.onCall(0).returns(true);\n\t\t\texistsSyncStub.onCall(1).returns(false);\n\t\t\tdecryptDataObj.on.withArgs('close').yields();\n\t\t}\n\n\t\tfunction assertDecryptDeployKey(encryptedFile?: any, key?: any, iv?: any, decryptedFile?: any) {\n\t\t\tprocess.env.decryptKeyName = 'decryptKeyName';\n\t\t\tprocess.env.decryptIvName = 'decryptIvName';\n\n\t\t\tconst promise = decryptDeployKey(encryptedFile, key, iv, decryptedFile);\n\n\t\t\tassert.instanceOf(promise, Promise);\n\n\t\t\treturn promise;\n\t\t}\n\n\t\treturn {\n\t\t\tasync 'arguments passed in explicitly'() {\n\t\t\t\tensureDecryptionResolves();\n\n\t\t\t\tconst deployKeyDecrypted = await assertDecryptDeployKey('encrypted.file', 'decrypt key', 'decrypt iv', 'decrypted.file');\n\n\t\t\t\t// default arguments are not used\n\t\t\t\tassert.isTrue(encryptedKeyFileStub.notCalled);\n\t\t\t\tassert.isTrue(keyFileStub.notCalled);\n\n\t\t\t\t// promise function is properly called\n\t\t\t\tassert.isTrue(createReadStreamStub.calledOnce);\n\t\t\t\tassert.isTrue(createWriteStreamStub.calledOnce);\n\n\t\t\t\t// decryptData is expected to be called with the appropriate arguments\n\t\t\t\tassert.isTrue(decryptDataStub.calledOnce);\n\t\t\t\tassert.isTrue(decryptDataStub.calledWith('readStream', 'decrypt key', 'decrypt iv'));\n\n\t\t\t\t// decryptData pipe properly closed\n\t\t\t\tassert.isTrue(deployKeyDecrypted);\n\t\t\t},\n\n\t\t\tasync 'arguments obtained from default'() {\n\t\t\t\tensureDecryptionResolves();\n\n\t\t\t\tconst deployKeyDecrypted = await assertDecryptDeployKey();\n\n\t\t\t\tassert.isTrue(deployKeyDecrypted);\n\t\t\t\tassert.isTrue(existsSyncStub.calledTwice);\n\t\t\t},\n\n\t\t\tasync 'nonexistent files and falsy arguments; eventually returns false'() {\n\t\t\t\texistsSyncStub.returns(false);\n\n\t\t\t\tassert.isFalse(await assertDecryptDeployKey());\n\t\t\t},\n\n\t\t\tasync 'decryption eventually rejects'() {\n\t\t\t\texistsSyncStub.onCall(0).returns(true);\n\t\t\t\texistsSyncStub.onCall(1).returns(false);\n\t\t\t\tdecryptDataObj.on.withArgs('error').yields(new Error('error'));\n\n\t\t\t\treturn assertDecryptDeployKey().then(\n\t\t\t\t\tthrowWithError('Should reject when necessary files don\\'t exist'),\n\t\t\t\t\t(err: Error) => {\n\t\t\t\t\t\tassert.strictEqual(err.message, 'error');\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t})()\n});\n"]}